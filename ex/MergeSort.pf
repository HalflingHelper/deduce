import List
import Nat
import Pair
import Log

// first parameter is the sum of the lengths
function merge(Nat, List<Nat>, List<Nat>) -> List<Nat> {
  merge(0, xs, ys) = empty
  merge(suc(n), xs, ys) =
    switch xs {
      case empty { ys }
      case node(x, xs') {
        switch ys {
          case empty {
            node(x, xs')
          }
          case node(y, ys') {
            if x ≤ y then
              node(x, merge(n, xs', node(y, ys')))
            else
              node(y, merge(n, node(x, xs'), ys'))
          }
        }
     }
   }
}

function msort(Nat, List<Nat>) -> Pair< List<Nat>, List<Nat> > {
  msort(0, xs) =
    switch xs {
      case empty { pair(empty, empty) }
      case node(x, xs') { pair(node(x, empty), xs') }
    }
  msort(suc(n'), xs) =
    define p1 = msort(n', xs)
    define p2 = msort(n', second(p1))
    define ys = first(p1)
    define zs = first(p2)
    pair(merge(length(ys) + length(zs), ys, zs), second(p2))
}

define merge_sort : fn List<Nat> -> List<Nat>
  = λxs{ first(msort(log(length(xs)), xs)) }
  
assert merge_sort(empty) = empty
assert merge_sort(node(1, empty)) = node(1, empty)
assert merge_sort(node(2, node(1, empty))) = node(1, node(2, empty))
assert merge_sort(node(3, node(2, node(1, empty))))
       = node(1, node(2, node(3, empty)))
assert merge_sort(node(4, node(3, node(2, node(1, empty)))))
       = node(1, node(2, node(3, node(4, empty))))

function sorted(List<Nat>) -> bool {
  sorted(empty) = true
  sorted(node(a, next)) =
    sorted(next) and all_elements(next, λb{ a ≤ b })
}

theorem length_zero_empty: all T:type, xs:List<T>.
  if length(xs) = 0
  then xs = empty
proof
  arbitrary T:type, xs:List<T>
  suppose len_z
  switch xs {
    case empty { . }
    case node(x,xs') suppose xs_xxs {
        conclude false by apply not_one_add_zero[length(xs')] to 
                          definition length in
                          rewrite xs_xxs in len_z
    }
  }
end

theorem mset_of_merge: all n:Nat. all xs:List<Nat>, ys:List<Nat>.
  if length(xs) + length(ys) = n
  then mset_of(merge(n, xs, ys)) = mset_of(xs) ⨄ mset_of(ys)
proof
  induction Nat
  case 0 {
    arbitrary xs:List<Nat>, ys:List<Nat>
    suppose prem: length(xs) + length(ys) = 0
    have lxs_lys_z: length(xs) = 0 and length(ys) = 0
      by apply add_to_zero[length(xs)][length(ys)] to prem
    have xs_mt: xs = empty
      by apply length_zero_empty[Nat,xs] to lxs_lys_z
    have ys_mt: ys = empty
      by apply length_zero_empty[Nat,ys] to lxs_lys_z
    _rewrite xs_mt | ys_mt
    _definition {merge, mset_of}
    symmetric m_sum_empty[Nat, m_fun(λx{0}) :MultiSet<Nat>]
  }
  case suc(n') suppose IH {
    arbitrary xs:List<Nat>, ys:List<Nat>
    suppose prem: length(xs) + length(ys) = suc(n')
    switch xs {
      case empty {
        _definition {merge, mset_of}
        conclude mset_of(ys) = m_fun(λx{0}) ⨄ mset_of(ys)
          by symmetric empty_m_sum[Nat, mset_of(ys)]
      }
      case node(x, xs') suppose xs_xxs {
        switch ys {
          case empty {
            _definition {merge, mset_of}
            conclude m_one(x) ⨄ mset_of(xs')
                   = m_one(x) ⨄ mset_of(xs') ⨄ m_fun(λ{0})
              by _rewrite m_sum_empty[Nat, m_one(x) ⨄ mset_of(xs')].
          }
          case node(y, ys') suppose ys_yys {
            _definition merge
            switch x ≤ y {
              case true suppose xy_true {
                _definition mset_of
                have sxs_sys_sn: suc(length(xs')) + suc(length(ys')) = suc(n')
                  by enable {length, operator+}
                     rewrite xs_xxs | ys_yys in prem
                have len_xs_yys: length(xs') + length(node(y,ys')) = n'
                  by enable {operator +, operator +, length}
                     injective suc sxs_sys_sn
                have IH': mset_of(merge(n',xs',node(y,ys')))
                        = mset_of(xs') ⨄ mset_of(node(y, ys'))
                  by apply IH[xs', node(y, ys')] to len_xs_yys
                _rewrite IH'
                _definition mset_of
                rewrite m_sum_assoc[Nat, m_one(x), mset_of(xs'),
                                    (m_one(y) ⨄ mset_of(ys'))]
              }
              case false suppose xy_false {
                _definition mset_of
                have sxs_sys_sn: suc(length(xs')) + suc(length(ys')) = suc(n')
                  by enable {length, operator+, operator+}
                     rewrite xs_xxs | ys_yys in prem
                have len_xxs_ys: length(node(x,xs')) + length(ys') = n'
                  by enable {operator +, operator +, length}
                     injective suc
                     rewrite add_suc[length(xs')][length(ys')] in
                     sxs_sys_sn
                have IH': mset_of(merge(n',node(x,xs'),ys'))
                        = mset_of(node(x,xs')) ⨄ mset_of(ys')
                  by apply IH[node(x,xs'), ys'] to len_xxs_ys
                equations
                  m_one(y) ⨄ mset_of(merge(n',node(x,xs'),ys'))
                      = m_one(y) ⨄ ((m_one(x) ⨄ mset_of(xs')) ⨄ mset_of(ys'))
                      by _rewrite IH' _definition mset_of.
                  ... = m_one(y) ⨄ (m_one(x) ⨄ (mset_of(xs') ⨄ mset_of(ys')))
                      by _rewrite m_sum_assoc[Nat, m_one(x), mset_of(xs'),
                                             mset_of(ys')].
                  ... = (m_one(y) ⨄ m_one(x)) ⨄ (mset_of(xs') ⨄ mset_of(ys'))
                      by _rewrite m_sum_assoc[Nat, m_one(y), m_one(x),
                               (mset_of(xs') ⨄ mset_of(ys'))].
                  ... = (m_one(x) ⨄ m_one(y)) ⨄ (mset_of(xs') ⨄ mset_of(ys'))
                      by _rewrite m_sum_commutes[Nat, m_one(x), m_one(y)].
                  ... = m_one(x) ⨄ (m_one(y) ⨄ (mset_of(xs') ⨄ mset_of(ys')))
                      by _rewrite m_sum_assoc[Nat, m_one(x), m_one(y),
                          (mset_of(xs') ⨄ mset_of(ys'))].
                  ... = m_one(x) ⨄ ((m_one(y) ⨄ mset_of(xs')) ⨄ mset_of(ys'))
                      by _rewrite m_sum_assoc[Nat, m_one(y), mset_of(xs'),
                          mset_of(ys')].
                  ... = m_one(x) ⨄ ((mset_of(xs') ⨄ m_one(y)) ⨄ mset_of(ys'))
                      by _rewrite m_sum_commutes[Nat, m_one(y), mset_of(xs')].
                  ... = m_one(x) ⨄ (mset_of(xs') ⨄ (m_one(y) ⨄ mset_of(ys')))
                      by _rewrite m_sum_assoc[Nat, mset_of(xs'), m_one(y),
                         mset_of(ys')].
                  ... = (m_one(x) ⨄ mset_of(xs')) ⨄ (m_one(y) ⨄ mset_of(ys'))
                      by _rewrite m_sum_assoc[Nat, m_one(x), mset_of(xs'),
                          (m_one(y) ⨄ mset_of(ys'))].
              }
            }
          }
        }
      }
    }
  }
end

theorem set_of_merge: all xs:List<Nat>, ys:List<Nat>.
  set_of(merge(length(xs) + length(ys), xs, ys)) = set_of(xs) ∪ set_of(ys)
proof
  arbitrary xs:List<Nat>, ys:List<Nat>
  have mset_of_merge: mset_of(merge(length(xs) + length(ys), xs, ys))
                    = mset_of(xs) ⨄ mset_of(ys)
    by apply mset_of_merge[length(xs) + length(ys)][xs, ys] to .
  equations
    set_of(merge(length(xs) + length(ys), xs, ys))
        = set_of_mset(mset_of(merge(length(xs) + length(ys), xs, ys)))
          by symmetric som_mset_eq_set[Nat]
                             [merge(length(xs) + length(ys), xs, ys)]
    ... = set_of_mset(mset_of(xs)) ∪ set_of_mset(mset_of(ys))
          by _rewrite mset_of_merge  som_union[Nat,mset_of(xs),mset_of(ys)]
    ... = set_of(xs) ∪ set_of(ys)
          by _rewrite som_mset_eq_set[Nat][xs] | som_mset_eq_set[Nat][ys].
end

theorem merge_sorted: all n:Nat. all xs:List<Nat>, ys:List<Nat>.
  if sorted(xs) and sorted(ys) and length(xs) + length(ys) = n
  then sorted(merge(n, xs, ys))
proof
  induction Nat
  case 0 {
    arbitrary xs:List<Nat>, ys:List<Nat>
    suppose _
    _definition merge
    conclude sorted(empty) by _definition sorted.
  }
  case suc(n') suppose IH {
    arbitrary xs:List<Nat>, ys:List<Nat>
    suppose prem
    _definition merge
    switch xs {
      case empty {
        conclude sorted(ys) by prem
      }
      case node(x, xs') suppose xs_xxs {
        switch ys {
          case empty {
            conclude sorted(node(x,xs'))  by rewrite xs_xxs in prem
          }
          case node(y, ys') suppose ys_yys {
            /* Apply the induction hypothesis
             * to prove sorted(merge(n',xs',node(y,ys')))
             */
            have s_xs: sorted(xs')
              by enable sorted rewrite xs_xxs in prem
            have s_yys: sorted(node(y,ys'))
              by rewrite ys_yys in prem
            have len_xs_yys: length(xs') + length(node(y,ys')) = n'
              by enable {operator +, operator +, length}
                 have sxs: suc(length(xs')) + suc(length(ys')) = suc(n')
                    by rewrite xs_xxs | ys_yys in prem
                 injective suc sxs
            have IH_xs_yys: sorted(merge(n',xs',node(y,ys')))
              by apply IH[xs',node(y,ys')]
                 to s_xs, s_yys, len_xs_yys

            /* Apply the induction hypothesis
             * to prove sorted(merge(n',node(x,xs'),ys'))
             */
            have len_xxs_ys: length(node(x,xs')) + length(ys') = n'
              by _definition {operator +,length}
                 _rewrite symmetric len_xs_yys
                 _definition {length, operator+, operator+}
                 _rewrite add_suc[length(xs')][length(ys')].
            have s_xxs: sorted(node(x, xs'))
              by enable sorted rewrite xs_xxs in prem
            have s_ys: sorted(ys')
              by definition sorted in rewrite ys_yys in prem
            have IH_xxs_ys: sorted(merge(n',node(x,xs'),ys'))
              by apply IH[node(x,xs'),ys']
                 to s_xxs, s_ys, len_xxs_ys

            have x_le_xs: all_elements(xs', λb{x ≤ b})
              by definition sorted in rewrite xs_xxs in prem
            have y_le_ys: all_elements(ys', λb{y ≤ b})
              by definition sorted in rewrite ys_yys in prem
            
            switch x ≤ y {
              case true suppose xy_true {
                _definition sorted
                suffices sorted(merge(n',xs',node(y,ys'))) and
                         all_elements(merge(n',xs',node(y,ys')), λb{x ≤ b})
                IH_xs_yys, 
                conclude all_elements(merge(n',xs',node(y,ys')),λb{x ≤ b})  by
                  _rewrite all_elements_eq_member
                     [Nat,merge(n',xs',node(y,ys')),λb{x ≤ b}]
                  _rewrite symmetric len_xs_yys
                  _rewrite set_of_merge[xs',node(y,ys')]
                  arbitrary z:Nat
                  suppose z_in_xs_yys: z ∈ set_of(xs') ∪ set_of(node(y,ys'))
                  suffices x ≤ z
                  cases apply member_union[Nat] to z_in_xs_yys
                  case z_in_xs: z ∈ set_of(xs') {
                    conclude x ≤ z by
                      apply all_elements_member[Nat][xs'][z, λb{x ≤ b}]
                      to x_le_xs, z_in_xs
                  }
                  case z_in_ys: z ∈ set_of(node(y,ys')) {
                    cases apply member_union[Nat]
                          to definition set_of in z_in_ys
                    case z_sy: z ∈ single(y) {
                      have y_z: y = z
                          by definition {operator ∈, single, rep} in z_sy
                      conclude x ≤ z by _rewrite symmetric y_z | xy_true.
                    }
                    case z_in_ys: z ∈ set_of(ys') {
                      have y_z: y ≤ z
                        by apply all_elements_member[Nat][ys'][z,λb{y ≤ b}]
                           to y_le_ys, z_in_ys
                      have x_y: x ≤ y by _rewrite xy_true.
                      conclude x ≤ z
                          by apply less_equal_trans[x][y,z] to x_y, y_z
                    }
                  }
              }
              case false suppose xy_false {
                have not_x_y: not (x ≤ y)
                  by suppose xs rewrite xy_false in xs
                have y_x: y ≤ x
                  by apply less_implies_less_equal[y][x] to
                     (apply not_less_equal_greater[x,y] to not_x_y)
                _definition sorted
                suffices sorted(merge(n',node(x,xs'),ys')) and
                         all_elements(merge(n',node(x,xs'),ys'),λb{y ≤ b})
                IH_xxs_ys, 
                conclude all_elements(merge(n',node(x,xs'),ys'),λb{y ≤ b}) by
                  _rewrite all_elements_eq_member
                     [Nat,merge(n',node(x,xs'),ys'),λb{y ≤ b}]
                  _rewrite symmetric len_xxs_ys
                  _rewrite set_of_merge[node(x,xs'),ys']
                  arbitrary z:Nat
                  suppose z_in_xxs_ys: z ∈ set_of(node(x,xs')) ∪ set_of(ys')
                  suffices y ≤ z
                  cases apply member_union[Nat] to z_in_xxs_ys
                  case z_in_xxs: z ∈ set_of(node(x,xs')) {
                    have z_in_sx_or_xs: z ∈ single(x) or z ∈ set_of(xs')
                      by apply member_union[Nat]
                         to definition set_of in z_in_xxs
                    cases z_in_sx_or_xs
                    case z_in_sx: z ∈ single(x) {
                      have x_z: x = z
                          by definition {operator ∈, single, rep} in z_in_sx
                      conclude y ≤ z  by _rewrite symmetric x_z  y_x
                    }
                    case z_in_xs: z ∈ set_of(xs') {
                      have x_z: x ≤ z
                        by apply all_elements_member[Nat]
                           to x_le_xs, z_in_xs
                      conclude y ≤ z 
                         by apply less_equal_trans to y_x, x_z
                    }
                  }
                  case z_in_ys: z ∈ set_of(ys') {
                    conclude y ≤ z by
                      apply all_elements_member[Nat]
                      to y_le_ys, z_in_ys
                  }
              }
            }
          }
        }
      }
    }
  }
end

theorem msort_empty: all n:Nat.
  first(msort(n, empty)) = empty and
  second(msort(n, empty)) = empty
proof
  induction Nat
  case 0 {
    _definition {msort, first, second}.
  }
  case suc(n') suppose IH {
    _definition {msort, first,length}
    have first_empty: first(msort(n',empty)) = empty
      by _rewrite conjunct 0 of IH.
    have second_empty: second(msort(n',empty)) = empty
      by _rewrite conjunct 1 of IH.
    _rewrite first_empty
    _rewrite second_empty
    _rewrite first_empty
    _definition {operator +, merge, second}
    _rewrite second_empty.
  }
end

theorem msort_first_empty: all n:Nat.
  first(msort(n, empty)) = empty
proof
  arbitrary n:Nat
  conjunct 0 of msort_empty[n]
end

theorem msort_second_empty: all n:Nat.
  second(msort(n, empty)) = empty
proof
  arbitrary n:Nat
  conjunct 1 of msort_empty[n]
end

theorem msort_sorted: all n:Nat. all xs:List<Nat>. 
  sorted(first(msort(n, xs)))
proof
  induction Nat
  case 0 {
    arbitrary xs:List<Nat>
    switch xs {
      case empty {
        _definition {msort, first}
        conclude sorted(empty)  by _definition sorted.
      }
      case node(x, xs') {
        _definition {msort, first}
        conclude sorted(node(x,empty))
            by _definition {sorted, sorted, all_elements}.
      }
    }
  }
  case suc(n') suppose IH {
    arbitrary xs:List<Nat>
    define ys = first(msort(n',xs))
    define zs = first(msort(n',second(msort(n',xs))))
    have IH1: sorted(ys)  by _definition ys IH[xs]
    have IH2: sorted(zs)  by _definition zs IH[second(msort(n',xs))]
    _definition {msort, first}
    definition {ys, zs} in
    apply merge_sorted[length(ys) + length(zs)] to IH1, IH2
  }
end

theorem merge_sort_sorted: all xs:List<Nat>.
  sorted(merge_sort(xs))
proof
  arbitrary xs:List<Nat>
  _definition merge_sort
  msort_sorted[log(length(xs))][xs]
end

theorem merge_length: all n:Nat. all xs:List<Nat>, ys:List<Nat>.
  if length(xs) + length(ys) = n
  then length(merge(n, xs, ys)) = n
proof
  induction Nat
  case 0 {
    arbitrary xs:List<Nat>, ys:List<Nat>
    suppose _
    _definition {merge, length}.
  }
  case suc(n') suppose IH {
    arbitrary xs:List<Nat>, ys:List<Nat>
    suppose prem
    _definition {merge}
    switch xs {
      case empty suppose xs_empty {
        conclude length(ys) = suc(n')
          by definition {length, operator+} in
             rewrite xs_empty in prem
      }
      case node(x, xs') suppose xs_xxs {
        switch ys {
          case empty suppose ys_empty {
            conclude length(node(x,xs')) = suc(n')
              by _definition {length, operator+, operator+}
                 rewrite add_zero[length(xs')] in
                 definition {length, operator+, operator+} in
                 rewrite xs_xxs | ys_empty in prem
          }
          case node(y, ys') suppose ys_yys {
            switch x ≤ y {
              case true {
                have suc_len_xs_yys:
                   suc(length(xs') + length(node(y,ys'))) = suc(n')
                  by _definition {length, operator+, operator+}
                     definition {operator+, operator+} in
                     rewrite ys_yys in
                     definition length in
                     rewrite xs_xxs in prem
                have len_xs_yys: length(xs') + length(node(y,ys')) = n'
                   by injective suc suc_len_xs_yys
                _definition {length, operator+, operator+}
                rewrite apply IH[xs', node(y, ys')] to len_xs_yys
              }
              case false {
                _definition length
                have suc_len: suc(length(xs) + length(ys')) = suc(n')
                  by rewrite add_suc[length(xs)][length(ys')] in
                     definition {length, operator+, operator+} in
                     rewrite ys_yys in prem
                _rewrite (rewrite xs_xxs in
                         apply IH[xs, ys'] to injective suc suc_len)
                conclude 1 + n' = suc(n') by one_add_suc[n']
              }
            }
          }
        }
      }
    }
  }
end

theorem msort_length: all n:Nat. all xs:List<Nat>.
  length(first(msort(n, xs)))  +  length(second(msort(n, xs))) = length(xs)
proof
  induction Nat
  case 0 {
    arbitrary xs:List<Nat>
    switch xs {
      case empty {
        _definition {msort, first, second, length, operator+}.
      }
      case node(x, xs') {
        _definition {msort, first, second, length, length, operator+, operator+}.
      }
    }
  }
  case suc(n') suppose IH {
    arbitrary xs:List<Nat>
    _definition {msort, first, second}

    define ys = first(msort(n',xs))
    define ls = second(msort(n',xs))
    have ys_def: first(msort(n',xs)) = ys  by _definition ys.
    have ls_def: second(msort(n',xs)) = ls  by _definition ls.
    _rewrite ys_def | ls_def
    
    define zs = first(msort(n', ls))
    define ms = second(msort(n', ls))
    have zs_def: first(msort(n', ls)) = zs by _definition zs.
    have ms_def: second(msort(n', ls)) = ms by _definition ms.
    _rewrite zs_def | ms_def

    have ys_ls_xs: length(ys) + length(ls) = length(xs)
      by rewrite ys_def | ls_def in IH[xs]
    have zs_ms_ls: length(zs) + length(ms) = length(ls)
      by rewrite zs_def | ms_def in IH[ls]
    _rewrite symmetric ys_ls_xs
    _rewrite symmetric zs_ms_ls
    
    _rewrite (apply merge_length[length(ys) + length(zs)][ys,zs] to .)
    rewrite add_assoc[length(ys)][length(zs), length(ms)]
  }
end

theorem mset_of_msort: all n:Nat. all xs:List<Nat>.
  mset_of(first(msort(n, xs)))  ⨄  mset_of(second(msort(n, xs))) = mset_of(xs)
proof
  induction Nat
  case 0 {
    arbitrary xs:List<Nat>
    _definition msort
    switch xs {
      case empty {
        _definition {first, second}
        suffices mset_of(empty : List<Nat>) ⨄ mset_of(empty : List<Nat>) = mset_of(empty : List<Nat>)
        _definition {mset_of}
        _rewrite m_sum_empty[Nat,m_fun(λx{0})].
      }
      case node(x, xs') {
        _definition {first, second, mset_of}
        suffices m_one(x) ⨄ mset_of(empty : List<Nat>) ⨄ mset_of(xs')
               = m_one(x) ⨄ mset_of(xs')
        _definition {mset_of}
        _rewrite m_sum_empty[Nat,m_one(x)].
      }
    }
  }
  case suc(n') suppose IH {
    arbitrary xs:List<Nat>
    _definition {msort, first, second}
    
    define ys = first(msort(n',xs))
    define ls = second(msort(n',xs))
    _rewrite have first(msort(n',xs)) = ys  by _definition ys.
    _rewrite have second(msort(n',xs)) = ls  by _definition ls.
    
    define zs = first(msort(n', ls))
    define ms = second(msort(n', ls))
    _rewrite have first(msort(n', ls)) = zs by _definition zs.
    _rewrite have second(msort(n', ls)) = ms by _definition ms.

    equations
          mset_of(merge(length(ys) + length(zs),ys,zs)) ⨄ mset_of(ms)
        = (mset_of(ys) ⨄ mset_of(zs)) ⨄ mset_of(ms)
          by _rewrite (apply mset_of_merge[length(ys) + length(zs)][ys,zs] to .).
    ... = mset_of(ys) ⨄ (mset_of(zs) ⨄ mset_of(ms))
          by _rewrite m_sum_assoc[Nat, mset_of(ys), mset_of(zs), mset_of(ms)].
    ... = mset_of(ys) ⨄ mset_of(ls)
          by _rewrite have mset_of(zs) ⨄ mset_of(ms) = mset_of(ls)
                     by _definition {zs, ms} IH[ls].
    ... = mset_of(xs)
          by _definition {ys, ls} IH[xs]
  }
end

assert msort(0, interval(10, 1)) = pair(interval(1,1), interval(9, 2))
assert msort(1, interval(10, 1)) = pair(interval(2,1), interval(8, 3))
assert msort(2, interval(10, 1)) = pair(interval(4,1), interval(6, 5))
assert msort(3, interval(10, 1)) = pair(interval(8,1), interval(2, 9))
assert msort(3, interval(8, 1)) = pair(interval(8,1), empty)
assert msort(3, interval(7, 1)) = pair(interval(7,1), empty)
assert msort(3, interval(6, 1)) = pair(interval(6,1), empty)

theorem msort_length_less_equal: all n:Nat. all xs:List<Nat>.
  if pow2(n) ≤ length(xs)
  then length(first( msort(n, xs) )) = pow2(n)
proof
  induction Nat
  case 0 {
    arbitrary xs:List<Nat>
    suppose prem
    switch xs {
      case empty suppose xs_mt {
        conclude false
            by definition {pow2, length, operator≤} in
               rewrite xs_mt in prem
      }
      case node(x, xs') suppose xs_xxs {
        _definition {msort,first}
        conclude length(node(x,empty)) = pow2(0)
            by _definition {length, length, pow2} one_add[0]
      }
    }
  }
  case suc(n') suppose IH {
    arbitrary xs:List<Nat>
    suppose prem
    have len_xs: pow2(n') + pow2(n') ≤ length(xs)
      by rewrite add_zero[pow2(n')] in
         definition {pow2, operator*, operator*,operator*} in prem
    _definition {pow2, msort, first}

    define_ ys = first(msort(n',xs))
    define_ ls = second(msort(n',xs))
    have ys_def: first(msort(n',xs)) = ys  by _definition ys.
    have ls_def: second(msort(n',xs)) = ls  by _definition ls.
    
    define_ zs = first(msort(n', ls))
    define_ ms = second(msort(n', ls))
    have zs_def: first(msort(n', ls)) = zs by _definition zs.
    have ms_def: second(msort(n', ls)) = ms by _definition ms.

    have p2n_le_xs: pow2(n') ≤ length(xs)
      by have p2n_le_2p2n: pow2(n') ≤ pow2(n') + pow2(n')
           by less_equal_add[pow2(n')][pow2(n')]
         apply less_equal_trans to p2n_le_2p2n, len_xs

    have len_ys: length(ys) = pow2(n')
      by rewrite ys_def in apply IH to p2n_le_xs
      
    have len_ys_ls_eq_xs: length(ys) + length(ls) = length(xs)
      by rewrite ys_def | ls_def in msort_length[n'][xs]

    have p2n_le_ls: pow2(n') ≤ length(ls)
      by have pp_pl: pow2(n') + pow2(n') ≤ pow2(n') + length(ls)
           by rewrite symmetric len_ys_ls_eq_xs | len_ys in len_xs
         apply less_equal_left_cancel to pp_pl
            
    have len_zs: length(zs) = pow2(n')
      by rewrite zs_def in apply IH[ls] to p2n_le_ls

    have len_ys_zs: length(ys) + length(zs) = 2 * pow2(n')
      by _rewrite len_ys | len_zs
         _definition {operator*,operator*,operator*}
         rewrite add_zero[pow2(n')]

    conclude length(merge(length(ys) + length(zs),ys,zs)) = 2 * pow2(n')
      by _rewrite len_ys_zs
         apply merge_length[2 * pow2(n')] to len_ys_zs
  }
end

theorem msort_length_less: all n:Nat. all xs:List<Nat>.
  if length(xs) < pow2(n)
  then length(first( msort(n, xs) )) = length(xs)
proof
  induction Nat
  case 0 {
    arbitrary xs:List<Nat>
    suppose prem
    switch xs {
      case empty suppose xs_mt {
        _definition {msort, length, first}.
      }
      case node(x, xs') suppose xs_xxs {
        _definition {msort,first, length, length}
        conclude false
          by definition {length, pow2, operator+, operator<, operator ≤, operator ≤} in
             rewrite xs_xxs in prem
      }
    }
  }
  case suc(n') suppose IH {
    arbitrary xs:List<Nat>
    suppose prem
    _definition{msort, first}

    define_ ys = first(msort(n',xs))
    define_ ls = second(msort(n',xs))
    have ys_def: first(msort(n',xs)) = ys  by _definition ys.
    have ls_def: second(msort(n',xs)) = ls  by _definition ls.
    
    define_ zs = first(msort(n', ls))
    define_ ms = second(msort(n', ls))
    have zs_def: first(msort(n', ls)) = zs by _definition zs.
    have ms_def: second(msort(n', ls)) = ms by _definition ms.

    have xs_le_two_p2n: length(xs) < pow2(n') + pow2(n')
      by rewrite add_zero[pow2(n')] in
         definition {pow2, operator*,operator*,operator*} in prem

    have ys_ls_eq_xs: length(ys) + length(ls) = length(xs)
      by rewrite ys_def | ls_def in msort_length[n'][xs]

    have pn_xs_or_xs_pn: pow2(n') ≤ length(xs) or length(xs) < pow2(n')
      by dichotomy[pow2(n'), length(xs)]
    cases pn_xs_or_xs_pn
    case pn_xs: pow2(n') ≤ length(xs) {
    
      have ys_pn: length(ys) = pow2(n')
          by rewrite ys_def in apply msort_length_less_equal to pn_xs

      have ls_l_pn: length(ls) < pow2(n')
          by have pn_ls_l_2pn: pow2(n') + length(ls) < pow2(n') + pow2(n')
               by rewrite symmetric ys_ls_eq_xs | ys_pn in xs_le_two_p2n
             apply less_left_cancel to pn_ls_l_2pn

      have len_zs: length(zs) = length(ls)
          by rewrite zs_def in apply IH to ls_l_pn

      equations
        length(merge(length(ys) + length(zs),ys,zs))
            = length(ys) + length(zs)
              by apply merge_length[length(ys) + length(zs)][ys,zs] to .
        ... = length(ys) + length(ls)
              by _rewrite len_zs.
        ... = length(xs)
              by ys_ls_eq_xs
    }
    case xs_pn: length(xs) < pow2(n') {
    
      have len_ys: length(ys) = length(xs)
        by rewrite ys_def in apply IH to xs_pn

      have len_ls: length(ls) = 0
        by apply left_cancel[length(ys)][length(ls), 0] to
           _rewrite add_zero[length(ys)] | len_ys
           rewrite len_ys in ys_ls_eq_xs

      have ls_l_pn: length(ls) < pow2(n')
        by _rewrite len_ls  pow_positive[n'] 
      
      have len_zs: length(zs) = 0
        by rewrite zs_def | len_ls in apply IH to ls_l_pn

      equations
        length(merge(length(ys) + length(zs),ys,zs))
          = length(ys) + length(zs)
            by apply merge_length[length(ys) + length(zs)][ys, zs] to .
      ... = length(xs)
            by _rewrite len_zs | add_zero[length(ys)] | len_ys.
    }   
  }
end

theorem mset_of_merge_sort: all xs:List<Nat>.
  mset_of(merge_sort(xs)) = mset_of(xs)
proof
  arbitrary xs:List<Nat>
  _definition merge_sort
  define n = log(length(xs))
  have n_def: log(length(xs)) = n  by _definition n.
  define ys = first(msort(n,xs))
  have ys_def: first(msort(n,xs)) = ys  by _definition ys.
  define ls = second(msort(n,xs))
  have ls_def: second(msort(n,xs)) = ls  by _definition ls.
  have len_xs: length(xs) ≤ pow2(n)
    by _rewrite symmetric n_def
       less_equal_pow_log[length(xs)]
  have len_ys: length(ys) = length(xs)
    by cases apply less_equal_implies_less_or_equal to len_xs
       case len_xs_less {
         rewrite ys_def in apply msort_length_less to len_xs_less
       }
       case len_xs_equal {
         have pn_le_xs: pow2(n) ≤ length(xs)
           by _rewrite len_xs_equal  less_equal_refl[pow2(n)]
         have len_ys_pow2: length(ys) = pow2(n)
           by _rewrite symmetric ys_def
              apply msort_length_less_equal to pn_le_xs
         transitive len_ys_pow2 (symmetric len_xs_equal)
       }
  have len_ys_ls_eq_xs: length(ys) + length(ls) = length(xs)
    by rewrite ys_def | ls_def in msort_length[n][xs]
  have len_ls: length(ls) = 0
    by apply left_cancel[length(ys)][length(ls), 0] to
       _rewrite add_zero[length(ys)] | len_ys
       rewrite len_ys in len_ys_ls_eq_xs
  have ls_mt: ls = empty
    by apply length_zero_empty[Nat, ls] to len_ls

  have ys_ls_eq_xs: mset_of(ys)  ⨄  mset_of(ls) = mset_of(xs)
    by rewrite ys_def | ls_def in mset_of_msort[n][xs]

  _rewrite n_def
  _rewrite ys_def
  equations
    mset_of(ys)
        = mset_of(ys)  ⨄  m_fun(λx{0})
          by _rewrite m_sum_empty[Nat, mset_of(ys)].
    ... = mset_of(ys)  ⨄  mset_of(ls)
          by _rewrite ls_mt _definition mset_of.
    ... = mset_of(xs)
          by ys_ls_eq_xs
end
