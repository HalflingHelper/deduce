import Nat
import List
import Set

function max_element(List<Nat>, Nat) -> Nat {
  max_element(empty, d) = d
  max_element(node(x, xs), d) = max(x, max_element(xs, d))
}

theorem max_elt_default:  all xs :List<Nat>. all d:Nat.
  d ≤ max_element(xs, d)
proof
  induction List<Nat>
  case empty {
    arbitrary d:Nat
    suffices d ≤ max_element(empty,d)  by .
    _definition max_element
    conclude d ≤ d  by less_equal_refl[d]
  }
  case node(x, xs') suppose IH {
    arbitrary d:Nat
    _definition max_element
    suffices d ≤ max(x,max_element(xs',d))  by .
    have d_xsd: d ≤ max_element(xs',d) by IH[d]
    have xsd_x_xsd: max_element(xs',d) ≤ max(x,max_element(xs',d))
      by max_greater_right[max_element(xs',d)][x]
    conclude d ≤ max(x,max_element(xs',d))
     by apply less_equal_trans[d][max_element(xs',d), max(x,max_element(xs',d))]
        to d_xsd, xsd_x_xsd
  }
end

theorem max_elt_greater_elt: all xs :List<Nat>. all y:Nat, d:Nat.
  if y ∈ set_of(xs)
  then y ≤ max_element(xs, d)
proof
  induction List<Nat>
  case empty {
    arbitrary y:Nat, d:Nat
    suppose impossible: y ∈ set_of(empty)
    conclude false
        by apply empty_no_members<Nat>[y]
	   to definition {set_of} in impossible
  }
  case node(x, xs') suppose IH {
    arbitrary y:Nat, d:Nat
    suppose y_in_xxs: y ∈ set_of(node(x, xs'))
    _definition max_element
    suffices y ≤ max(x,max_element(xs',d))   by .
    have xy_or_y_xs: y ∈ single(x) or y ∈ set_of(xs')
      by apply member_union<Nat> to definition set_of in y_in_xxs
    cases xy_or_y_xs
    case y_in_sx: y ∈ single(x) {
      have x_y: x = y by apply single_equal<Nat> to y_in_sx
      _rewrite x_y
      conclude y ≤ max(y,max_element(xs',d))
          by max_greater_left[y][max_element(xs',d)]
    }
    case y_in_xs: y ∈ set_of(xs') {
      have y_le_xs: y ≤ max_element(xs',d)   by apply IH[y,d] to y_in_xs
      have xs_le_xxs: max_element(xs',d) ≤ max(x,max_element(xs',d))
        by max_greater_right[max_element(xs',d)][x]
      conclude y ≤ max(x,max_element(xs',d))
        by apply less_equal_trans to y_le_xs, xs_le_xxs
    }
  }
end

theorem max_elt_elt_or_d: all xs:List<Nat>. all d:Nat.
  max_element(xs, d) ∈ set_of(xs)
  or max_element(xs, d) = d
proof
  induction List<Nat>
  case empty {
    arbitrary d:Nat
    conclude max_element(empty,d) = d
      by _definition max_element.
  }
  case node(x, xs') suppose IH {
    arbitrary d:Nat
    cases IH[d]
    case mxs_in_xs: max_element(xs',d) ∈ set_of(xs') {
      suffices max_element(node(x,xs'),d) ∈ set_of(node(x,xs'))
                      by suppose new_goal new_goal
      _definition {max_element, set_of}
      cases max_is_left_or_right[x][max_element(xs',d)]
      case m_x: max(x,max_element(xs',d)) = x {
        suffices x ∈ single(x) ∪ set_of(xs')  with rewrite m_x
	apply in_left_union<Nat>[set_of(xs'), x, single(x)] to single_member<Nat>[x]
      }
      case m_mxs: max(x,max_element(xs',d)) = max_element(xs',d) {
        suffices max_element(xs', d) ∈ single(x) ∪ set_of(xs')
            with rewrite m_mxs
        apply in_right_union<Nat>[single(x), max_element(xs',d), set_of(xs')] to mxs_in_xs
      }
    }
    case mxs_d: max_element(xs',d) = d {
      _definition {max_element, set_of}
      _rewrite mxs_d
      cases max_is_left_or_right[x][d]
      case m_x: max(x,d) = x {
        _rewrite m_x
	have x_sx_xs: x ∈ (single(x) ∪ set_of(xs'))
	  by apply in_left_union<Nat>[set_of(xs'), x, single(x)] to single_member<Nat>[x]
        x_sx_xs
      }
      case m_d: max(x,d) = d {
        _rewrite m_d.
      }
    }
  }
end