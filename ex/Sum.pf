import Nat
import List
import Option

function sum(List<Nat>) -> Nat {
  sum(empty) = 0
  sum(node(x, xs)) = x + sum(xs)
}

// [3, 5, 1, 8]
// [0, 4)
// sum(3 :: [5, 1, 8]) = 3 + sum([5,1,8])
// summation([0,4), nth([3, 5, 1, 8], 0)) = nth([3, 5, 1, 8],0)(0) + summation([1,4), nth([3, 5, 1, 8],0))
// summation([1,4), nth([3, 5, 1, 8],0)) = summation([0,3), nth([5, 1, 8],0))
// summation([start,start+len), nth(xs,0)) = summation([0,len), nth(drop(start,xs), 0))     len = length(drop(start,xs))
// nth(drop(n, xs), d)(i) = nth(xs, d)(n + i)

theorem sum_summation: all xs:List<Nat>. all start:Nat.
  if start ≤ length(xs) then
  sum(drop(start, xs)) = summation(range(start,length(xs)), nth(xs,0))
proof
  induction List<Nat>
  case empty {
    arbitrary start:Nat
    definition length
    assume s_le_z: start ≤ 0
    have s_eq_z: start = 0 by apply zero_le_zero[start] to s_le_z
    rewrite s_eq_z
    definition {drop, sum, range, range_aux, up_to, down_from, reverse, map, summation}.
  }
  case node(x, xs') assume IH {
    arbitrary start:Nat
    assume s_le_xxs
    ?
  }
end

/*
theorem foldr_sum: all xs:List<Nat>. all init:Nat.
  foldr(xs, init, λa,b{a + b})
  = summation(inds, λi{default(nth(xs,i), 0)}) + init
proof
  induction List<Nat>
  case empty {
    ?
  }
  case node(x, xs') assume IH {
    ?
  }
end
*/