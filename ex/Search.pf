import Nat
import List

function search(List<Nat>, Nat) -> Nat {
  search(empty, y) = 0
  search(node(x, xs), y) =
    if x = y then
      0
    else
      suc(search(xs, y))
}

define list_439 = node(4, node(3, node(9, empty)))
assert search(list_439, 4) = 0
assert search(list_439, 3) = 1
assert search(list_439, 9) = 2
assert search(list_439, 0) = 3

theorem search_present2: all xs:List<Nat>. all y:Nat, d:Nat.
  define i = search(xs, y)
  if i < length(xs)
  then nth(xs, d)(i) = y
proof
  induction List<Nat>
  case empty {
    arbitrary y:Nat, d:Nat
    definition {search,length}
    suppose imp: 0 < 0
    conclude false  by definition {operator <, operator ≤} in imp
  }
  case node(x, xs') suppose IH {
    arbitrary y:Nat, d:Nat
    definition {search,length}
    suppose prem
    switch x = y {
      case true suppose xy {
        definition nth
        rewrite xy.
      }
      case false suppose not_xy {
        definition {nth, pred}
        conclude nth(xs',d)(search(xs',y)) = y
	  by enable  {operator <, operator ≤}
	     apply (definition {} in IH[y, d]) to
	     rewrite not_xy in prem
      }
    }
  }
end

theorem search_absent2: all xs:List<Nat>. all y:Nat, d:Nat.
  if length(xs) ≤ search(xs, y)
  then not (y ∈ set_of(xs))
proof
  induction List<Nat>
  case empty {
    arbitrary y:Nat, d:Nat
    suppose _
    conclude not (y ∈ set_of(empty))
        by definition {set_of}
	   empty_no_members[Nat,y]
  }
  case node(x, xs') suppose IH {
    arbitrary y:Nat, d:Nat
    suppose s_xxs_len_xxs
    switch x = y {
      case true suppose xy {
        suppose y_xxs: y ∈ set_of(node(x,xs'))
        enable {search, length, operator ≤}
	conclude false  by rewrite xy in s_xxs_len_xxs
      }
      case false suppose not_xy {
        suppose y_in_xxs: y ∈ set_of(node(x,xs'))
	have xy_or_y_xs: y ∈ single(x) or y ∈ set_of(xs')
	  by apply member_union[Nat,y, single(x), set_of(xs')]
	     to definition set_of in y_in_xxs
	cases xy_or_y_xs
	case y_sx: y ∈ single(x) {
	  have x_y: x = y by apply single_equal[Nat,x,y] to y_sx
	  conclude false   by rewrite not_xy in x_y
	}
	case y_xs {
          have sxs_lxs: length(xs') ≤ search(xs',y)
	    by rewrite not_xy in definition {search,length,operator ≤} in
	       s_xxs_len_xxs
	  conclude false  by apply (apply IH[y,d] to sxs_lxs) to y_xs
	}
      }
    }
  }
end


theorem search_present: all xs:List<Nat>. all y:Nat, d:Nat.
  if y ∈ set_of(xs)
  then define i = search(xs, y)
       nth(xs, d)(i) = y
proof
  induction List<Nat>
  case empty {
    arbitrary y:Nat, d:Nat
    suppose y_empty: y ∈ set_of(empty)
    conclude false   by apply empty_no_members[Nat,y]
                        to definition {set_of} in y_empty
  }
  case node(x, xs') suppose IH {
    arbitrary y:Nat, d:Nat
    suppose y_in_xxs: y ∈ set_of(node(x,xs'))
    definition {nth, search}
    switch x = y {
      case true suppose xy_true {
        conclude x = y   by rewrite xy_true.
      }
      case false suppose xy_false {
        definition pred
	have xy_or_y_xs: y ∈ single(x) or y ∈ set_of(xs')
	  by apply member_union[Nat,y, single(x), set_of(xs')]
	     to definition set_of in y_in_xxs
	cases xy_or_y_xs
	case y_sx: y ∈ single(x) {
	  have x_y: x = y by apply single_equal[Nat,x,y] to y_sx
	  conclude false   by rewrite xy_false in x_y
	}
	case y_xs: y ∈ set_of(xs') {
	  conclude nth(xs',d)(search(xs',y)) = y
	      by apply IH[y,d] to y_xs
	}
      }
    }
  }
end

theorem search_absent: all xs:List<Nat>. all y:Nat, d:Nat.
  if not (y ∈ set_of(xs))
  then search(xs, y) = length(xs)
proof
  induction List<Nat>
  case empty {
    arbitrary y:Nat, d:Nat
    suppose _
    conclude search(empty,y) = length(empty)
        by definition {search, length}.
  }
  case node(x, xs) suppose IH {
    arbitrary y:Nat, d:Nat
    suppose y_not_xxs: not (y ∈ set_of(node(x,xs)))
    suffices search(node(x,xs),y) = length(node(x,xs))
    definition {search, length}
    switch x = y {
      case true suppose xy {
        have x_y: x = y by rewrite xy.
        conclude false
            by enable {set_of}
	       apply y_not_xxs
	       to (apply in_left_union[Nat,y, single(x), set_of(xs)]
		   to rewrite x_y single_member[Nat, y])
      }
      case false suppose not_xy {
        suffices suc(search(xs,y)) = suc(length(xs))
	have s_l: search(xs,y) = length(xs)
          by enable {set_of}
	     apply IH[y, d]
	     to suppose y_xs
	        (apply y_not_xxs to
		definition set_of
		apply in_right_union[Nat,y, single(x), set_of(xs)] to y_xs)
	rewrite s_l.
      }
    }
  }
end

theorem search_first: all xs:List<Nat>. all y:Nat, d:Nat, i:Nat.
  if i < length(xs) and nth(xs, d)(i) = y
  then search(xs, y) ≤ i
proof
  induction List<Nat>
  case empty {
    arbitrary y:Nat, d:Nat, i:Nat
    suppose prem
    definition search
    conclude 0 ≤ i   by definition operator ≤.
  }
  case node(x, xs') suppose IH {
    arbitrary y:Nat, d:Nat, i:Nat
    suppose prem
    suffices search(node(x,xs'),y) ≤ i
    definition search
    switch x = y {
      case true suppose xy {
        conclude 0 ≤ i   by definition operator ≤.
      }
      case false suppose not_xy {
        suffices suc(search(xs',y)) ≤ i
	switch i { 
          case 0 suppose i_z: i = 0 {
	    conclude false
	      by rewrite not_xy in definition nth in rewrite i_z in prem
	  }
	  case suc(i') suppose i_si: i = suc(i') {
	    suffices suc(search(xs',y)) ≤ suc(i')
	    definition operator ≤
	    conclude search(xs',y) ≤ i'
	        by enable {length, nth, pred, operator <, operator ≤}
		   apply IH[y,d,i'] to rewrite i_si in prem
	  }
	}
      }
    }
  }
end

function search_last(List<Nat>, Nat) -> Nat {
  search_last(empty, y) = 0
  search_last(node(x, xs'), y) =
    define i = search_last(xs', y)
    if x = y then
      (if i < length(xs') then i else 0)
    else
      suc(i)
}

function search_if<T>(List<T>, fn T->bool) -> Nat {
  search_if(empty, P) = 0
  search_if(node(x, xs), P) =
    if P(x) then
      0
    else
      suc(search_if(xs, P))
}
