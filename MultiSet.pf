/*
  Represent multisets as function to Nat.
  */

import Base
import Nat
import Set

union MultiSet<T> {
  m_fun(fn(T) -> Nat)
}

function cnt<T>(MultiSet<T>) -> fn(T)->Nat {
  cnt(m_fun(f)) = f
}

define m_one : < T > fn T -> MultiSet<T>
         = generic T { λx { m_fun(λy{if x = y then 1 else 0}) } }

define operator ⨄ : < T > fn MultiSet<T>, MultiSet<T> -> MultiSet<T>
         = generic T { λP,Q{ m_fun(λx{ cnt(P)(x) + cnt(Q)(x) }) } }

theorem m_one_cnt: all T:type, x:T. cnt(m_one(x))(x) = 1
proof
  arbitrary T:type, x:T
  definition {cnt, m_one}.
end

theorem m_empty_zero: all T:type, x:T.
  cnt(m_fun(λy{0}: fn T->Nat))(x) = 0
proof
  arbitrary T:type, x:T
  definition {cnt}.
end

theorem cnt_sum: all T:type, A:MultiSet<T>, B:MultiSet<T>, x:T.
  cnt(A ⨄ B)(x) = cnt(A)(x) + cnt(B)(x)
proof
  arbitrary T:type, A:MultiSet<T>, B:MultiSet<T>, x:T
  definition {cnt, operator ⨄}.
end

theorem m_sum_empty: all T:type, A:MultiSet<T>.
  A ⨄ m_fun(λy{0}: fn T->Nat) = A
proof
  arbitrary T:type, A:MultiSet<T>
  definition {operator ⨄, cnt}
  switch A {
    case m_fun(f) {
      have eq: (λx{(f(x) + 0)} : fn T->Nat) = f
        by extensionality arbitrary x:T
           rewrite add_zero[f(x)].
      rewrite eq.
    }
  }
end

theorem empty_m_sum: all T:type, A:MultiSet<T>.
  m_fun(λx{0} : fn T->Nat) ⨄ A = A
proof
  arbitrary T:type, A:MultiSet<T>
  definition {operator ⨄, m_fun}
  switch A {
    case m_fun(f) {
      have eq: (λx{0 + f(x)} : fn T->Nat) = f
        by extensionality arbitrary x:T
	   definition {operator +}.
      definition cnt
      rewrite eq.
    }
  }
end


theorem m_sum_sym: all T:type, A:MultiSet<T>, B:MultiSet<T>.
  A ⨄ B = B ⨄ A
proof
  arbitrary T:type, A:MultiSet<T>, B:MultiSet<T>
  definition {operator ⨄}
  switch A {
    case m_fun(f) {
      switch B {
        case m_fun(g) {
	  definition cnt
	  have eq: (λx{(f(x) + g(x))} : fn T->Nat) = λx{(g(x) + f(x))}
	    by extensionality arbitrary x:T
	       rewrite add_commute[f(x)][g(x)].
	  rewrite eq.
	}
      }
    }
  }
end

theorem m_sum_assoc: all T:type, A:MultiSet<T>, B:MultiSet<T>, C:MultiSet<T>.
  (A ⨄ B) ⨄ C = A ⨄ (B ⨄ C)
proof
  arbitrary T:type, A:MultiSet<T>, B:MultiSet<T>, C:MultiSet<T>
  definition {operator ⨄}
  switch A {
    case m_fun(f) {
      switch B {
	case m_fun(g) {
	  switch C {
	    case m_fun(h) {
	      definition cnt
	      have fgh_eq: (λx{(f(x) + g(x)) + h(x)} : fn T->Nat)
	                 = λx{f(x) + (g(x) + h(x))}
	        by extensionality arbitrary x:T
		   definition {}
		   rewrite add_assoc[f(x)][g(x),h(x)].
              rewrite fgh_eq.
	    }
	  }
	}
      }
    }
  }
end

define set_of_mset : < T > fn MultiSet<T> -> Set<T>
  = generic T {λM{char_fun(λx{ if cnt(M)(x) = 0 then false else true })}}

theorem som_one_single: all T:type, x:T.
  set_of_mset(m_one(x)) = single(x)
proof
  arbitrary T:type, z:T
  definition {m_one, single, set_of_mset}
  have eq: (λx{(if cnt(m_fun(λy{(if z = y then 1 else 0)}: fn T->Nat))(x) = 0
               then false else true)} : fn T->bool)
           = λy{z = y}
    by extensionality
       arbitrary y:T
       definition {cnt}
       switch y = z {
         case true suppose yz_true {
	   have z_y: z = y
	     by symmetric rewrite yz_true.
	   rewrite z_y.
	 }
	 case false suppose yz_false {
	   have not_zy: not (z = y)
	     by suppose zy
	        rewrite yz_false in symmetric zy
	   rewrite not_zy.
	 }
       }
  rewrite eq.
end

theorem som_union: all T:type, A:MultiSet<T>, B:MultiSet<T>.
  set_of_mset(A ⨄ B) = set_of_mset(A) ∪ set_of_mset(B)
proof
  arbitrary T:type, A:MultiSet<T>, B:MultiSet<T>
  definition {set_of_mset, operator ∪, operator ⨄, cnt, rep}
  have eq: (λx{(if cnt(A)(x) + cnt(B)(x) = 0 then false else true)}: fn T->bool)
    = λx{((if cnt(A)(x) = 0 then false else true)
         or (if cnt(B)(x) = 0 then false else true))}
    by extensionality  arbitrary x:T
       definition {}
       switch cnt(A)(x) {
         case 0 suppose Ax_z {
	   rewrite Ax_z
	   definition operator +.
	 }
	 case suc(Ax) suppose Ax_s {
	   rewrite Ax_s
	   definition operator +.
	 }
       }
  rewrite eq.
end