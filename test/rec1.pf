union Nat {
  zero;
  suc(Nat);
}

function add(Nat,Nat) -> Nat {
  add(zero, m) = m;
  add(suc(n), m) = suc(add(n, m));
}

define f : fn Nat,Nat,Nat->Nat = Î» x, y, z { add(add(x,y),z) }

theorem apply_f: f(zero, suc(zero), suc(suc(zero))) = suc(suc(suc(zero)))
proof
  apply f, add in goal;
  reflexive
end

theorem add_zero_one: add(zero, suc(zero)) = suc(zero)
proof
  apply add in goal; reflexive
end

theorem add_one_zero: add(suc(zero), zero) = suc(zero)
proof
  apply add in goal; reflexive
end