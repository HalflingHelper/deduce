union Nat {
  zero;
  suc(Nat);
}

function add(Nat,Nat) -> Nat {
  add(zero, m) = m;
  add(suc(n), m) = suc(add(n, m));
}

theorem add_zero: all n:Nat. add(n, zero) = n
proof
  induction Nat
  case zero {
    have add(zero, zero) = zero by apply add in goal; reflexive
  }
  case suc(n') {
    equations
      add(suc(n'), zero) = suc(add(n', zero))   by apply add in goal; reflexive
                     ... = suc(n')              by rewrite goal with IH; reflexive
  }
end

