DIGIT: /[0-9]/
INT: DIGIT+
UPPER: /[A-Z]/
LOWER: /[a-z]/
OPERATOR: /[\-\+*%=≠<>≤≥&∘∪∩⊆∈⨄]/
IDENT: (/_/|UPPER|LOWER) (/_/|UPPER|LOWER|DIGIT|/[₀₁₂₃₄₅₆₇₈₉!?']/)*
NEWLINE: (/\r/? /\n/)+
WS: /[ \t\f\r\n]/+
LINECOMMENT: "//" /[^\n]*/ NEWLINE
COMMENT: /\/\*([^\*]|\*+[^\/])*\*+\//

?term: term "and" term_compare                    -> and_formula
    | term "or" term_compare                      -> or_formula
    | term ":" type                           -> annote_type
    | "if" term "then" term "else" term       -> conditional
    | "if" term "then" term                  -> if_then_formula
    | term_compare

?term_compare: term_compare "=" term_add             -> equal
    | term_compare "≠" term_add                       -> not_equal
    | term_compare "<" term_add                        -> less
    | term_compare ">" term_add                        -> greater
    | term_compare "≤" term_add                       -> less_equal
    | term_compare "≥" term_add                       -> greater_equal
    | term_compare "⊆" term_add                       -> subset_equal
    | term_compare "∈" term_add                       -> membership
    | term_add

?term_add: term_med "+" term_add                   -> add
    | term_add "-" term_med                        -> sub
    | term_add "∪" term_med                        -> union_op
    | term_add "∩" term_med                        -> intersect
    | term_add "⨄" term_med                        -> multiset_sum
    | term_med

?term_med: term_med "/" term_hi                    -> div
    | term_med "%" term_hi                         -> mod
    | term_hi "*" term_med                         -> mul
    | term_med "∘" term_hi                         -> circ
    | term_hi

?switch_case: "case" pattern "{" term "}"           -> switch_case

?switch_list: switch_case                           -> single
    | switch_case switch_list                       -> push

ident: IDENT              -> ident
    | "operator" OPERATOR -> ident
    | "operator" "/" -> ident

?term_hi: INT                                      -> int
    | "true"                                       -> true_literal
    | "false"                                      -> false_literal
    | "∅"                                          -> emptyset_literal
    | "-" term_hi                                  -> neg
    | "not" term_hi                                -> logical_not
    | IDENT                                        -> term_var
//    | term_hi "<" type_list ">"                    -> term_inst
    | term_hi "(" term_list ")"                    -> call
    | "λ" ident_list "{" term "}"                  -> lambda
    | "generic" ident_list "{" term "}"            -> generic
    | "switch" term "{" switch_list "}"            -> switch
    | "all" var_list "." term                      -> all_formula
    | "<" ident_list ">" term                       -> alltype_formula
    | "some" var_list "." term                     -> some_formula
    | "define" IDENT "=" term term                 -> define_term
    | "(" term ")"                                 -> paren
    | "%" type
    
?term_list:                                        -> empty
    | term                                         -> single
    | term "," term_list                           -> push
    
?ident_list:                                       -> empty
    | ident                                        -> single
    | ident "," ident_list                         -> push

?var_list:                                         -> empty_binding
    | ident ":" type                               -> single_binding
    | ident ":" type "," var_list                  -> push_binding

?assumption_list:                                  -> empty_binding
    | ident ":" term                               -> single_binding
    | ident                                        -> single_var
    | ident ":" term "," assumption_list           -> push_binding
    | ident "," assumption_list                    -> push_var

?ind_case: "case" pattern "{" proof "}"            -> ind_case
    | "case" pattern "suppose" assumption_list "{" proof "}" -> ind_case_assume

?ind_case_list: ind_case                           -> single
    | ind_case ind_case_list                       -> push

?switch_pf_case: "case" pattern "{" proof "}"      -> switch_pf_case
    | "case" pattern "suppose" assumption_list "{" proof "}"      -> switch_pf_case_assume

?switch_pf_case_list: switch_pf_case               -> single
    | switch_pf_case switch_pf_case_list           -> push

?equation: term_compare "=" term_add "by" proof            -> equation

?half_equation:  "..." "=" term_add "by" proof     -> half_equation

?equation_list: half_equation                      -> single
    | half_equation equation_list                  -> push
 
?proof_list: proof                                 -> single
    | proof "|" proof_list                         -> push
    
?proof: "have" term "by" proof                           -> annot
    | "suffices" term proof                              -> annot
    | "conclude" term "by" proof                         -> annot
    | "apply" proof "to" proof                           -> modus_ponens
    | proof "," proof                                    -> tuple
    | "conjunct" INT "of" proof                          -> conjunct
    | "suppose" IDENT proof                              -> imp_intro
    | "suppose" IDENT ":" term proof                     -> imp_intro_explicit
    | "arbitrary"  var_list proof                        -> all_intro
    | "choose" term_list proof                           -> some_intro
    | "obtain" ident_list "where" IDENT "from" proof proof -> some_elim
    | "obtain" ident_list "where" IDENT ":" term "from" proof proof -> some_elim_explicit
    | "cases" proof case_list                            -> cases
    | "induction" type ind_case_list                     -> induction
    | "definition" "{" ident_list "}" proof              -> apply_defs_goal
    | "definition" ident proof                           -> apply_defs_goal_one
    | "definition" "{" ident_list "}" "in" proof         -> apply_defs_fact
    | "definition" ident "in" proof                      -> apply_defs_fact_one
    | "enable" "{" ident_list "}" proof                  -> enable_defs
    | "enable" ident proof                               -> enable_def
    | "rewrite" proof_list proof                         -> rewrite_goal
    | "rewrite" proof_list "in" proof                    -> rewrite_fact
    | "switch" term "{" switch_pf_case_list "}"          -> switch_proof
    | "equations" equation equation_list                 -> equations_proof
    | "stop" "?" proof                                   -> hole_in_middle_proof
    | proof_hi

?proof_hi: IDENT                                         -> proof_var
    | "have" IDENT ":" term "by" proof proof             -> let
    | "define" IDENT "=" term proof                      -> define_term_proof
    | "term" term "by" proof proof                       -> term_proof
    | "."                                                -> true_proof
    | "reflexive"                                        -> refl_proof
    | "symmetric" proof                                  -> sym_proof
    | "transitive" proof proof                           -> trans_proof
    | "injective" term proof                             -> injective_proof
    | "extensionality" proof                             -> extensionality_proof
    | "(" proof ")"                                      -> paren
    | proof_hi "[" term_list "]"                         -> all_elim
    | proof_hi "<" type_list ">"                         -> all_elim
    | "?"                                                -> hole_proof
    | "sorry"                                            -> sorry_proof

?case: "case" IDENT "{" proof "}"                        -> case
    | "case" IDENT ":" term "{" proof "}"                -> case_annot

?case_list: case                                        -> single
    | case case_list                                    -> push

?theorem: "theorem" IDENT ":" term "proof" proof "end" -> theorem
 | "lemma" IDENT ":" term "proof" proof "end"          -> theorem

?type: type_params_opt "fn" type_list "->" type        -> function_type
 | IDENT "<" type_list ">"                                -> type_inst
 | type_hi

?type_hi: IDENT   -> type_name
 | "int"          -> int_type
 | "bool"         -> bool_type
 | "type"         -> type_type
 | "(" type ")"   -> paren

?type_list:                                      -> empty
    | type                                       -> single
    | type "," type_list                         -> push

?type_params_opt:                                -> empty
   | "<" ident_list ">"

?constr: IDENT                                   -> constr_id
    | IDENT "(" type_list ")"                    -> constr_apply

?constr_list: constr                             -> single
    | constr constr_list                         -> push
    
?union: "union" IDENT type_params_opt "{" constr_list "}" -> union

?pattern: ident                                  -> pattern_id
    | "0"                                        -> pattern_zero
    | "true"                                     -> pattern_true
    | "false"                                    -> pattern_false
    | IDENT "(" ident_list ")"                   -> pattern_apply

?pattern_list:                                      -> empty
    | pattern                                       -> single
    | pattern "," ident_list                        -> push
    
?fun_case: ident "(" pattern_list ")" "=" term      -> fun_case

?fun_case_list: fun_case                               -> single
    | fun_case fun_case_list                           -> push
    
?rec_function: "function" ident type_params_opt "(" type_list ")" "->" type "{" fun_case_list "}" -> rec_fun

?definition: "define" ident "=" term      -> define
 | "define" ident ":" type "=" term       -> define_annot

?import: "import" IDENT                            -> import

?assert: "assert" term                             -> assert

?print: "print" term                               -> print

?statement: theorem
 | union
 | rec_function
 | definition
 | import
 | assert
 | print

?statement_list: statement                               -> single
    | statement statement_list                           -> push

program: statement_list

%ignore COMMENT
%ignore LINECOMMENT
%ignore WS
