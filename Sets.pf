
/*
  Represent sets as predicates, that is, functions to bool.
*/

define operator ∪ : < T > fn (fn(T)->bool), (fn(T)->bool) -> (fn(T)->bool)
         = λP,Q{λx{ P(x) or Q(x) }}

define operator ∩ : < T > fn (fn(T)->bool), (fn(T)->bool) -> (fn(T)->bool)
         = λP,Q{λx{ P(x) and Q(x) }}

define diff : < T > fn (fn(T)->bool), (fn(T)->bool) -> (fn(T)->bool)
         = λP,Q{λx{ P(x) and not Q(x) }}

define operator ⊆ : < T > fn (fn(T)->bool), (fn(T)->bool) -> bool
         = generic T { λP,Q{all x:T. if P(x) then Q(x)} }

define operator ∅ : < T > fn(T)->bool
         = λx{ false }

define operator ∈ : < T > fn T, (fn(T)->bool) -> bool
         = λx,f{ f(x) }

theorem in_left_union:
  all T:type, x:T, A: fn(T)->bool, B:fn(T)->bool.
  if x ∈ A then x ∈ (A ∪ B)
proof
  arbitrary T:type, x:T, A: fn(T)->bool, B:fn(T)->bool
  suppose x_A: x ∈ A
  definition {operator ∈, operator ∪}
  conclude A(x)  by definition operator ∈ in x_A
end

theorem in_right_union:
  all T:type, x:T, A: fn(T)->bool, B:fn(T)->bool.
  if x ∈ B then x ∈ (A ∪ B)
proof
  arbitrary T:type, x:T, A: fn(T)->bool, B:fn(T)->bool
  suppose x_B: x ∈ B
  definition {operator ∈, operator ∪}
  conclude B(x)  by definition operator ∈ in x_B
end