union Nat {
  zero;
  suc(Nat);
}

function +(Nat,Nat) -> Nat {
  +(0, m) = m;
  +(suc(n), m) = suc(n + m);
}

function max(Nat,Nat) -> Nat {
  max(zero, n) = n;
  max(suc(m'), n) =
    switch n {
      case zero { suc(m') }
      case suc(n') { suc(max(m',n')) }
    };
}

theorem add_zero: all n:Nat. n + 0 = n
proof
  induction Nat
  case 0 {
    have 0 + 0 = 0 by apply + in goal; reflexive
  }
  case suc(n') {
    equations
      suc(n') + 0 = suc(n' + 0) by apply + in goal; reflexive
              ... = suc(n') by rewrite goal with IH; reflexive
  }
end

theorem add_suc: all m:Nat. all n:Nat. m + suc(n) = suc(m + n)
proof
  induction Nat
  case 0 {
    arbitrary n : Nat;
    apply + in goal; reflexive
  }
  case suc(n') {
    arbitrary n : Nat;
    have IHn: n' + suc(n) = suc(n' + n) by IH[n];
    have suc(n') + suc(n) = suc(suc(n') + n) by
    equations
    suc(n')+suc(n) = suc(n' + suc(n)) by apply + in goal; reflexive
               ... = suc(suc(n' + n)) by rewrite goal with IH[n]; reflexive
               ... = suc(suc(n') + n) by apply + in goal; reflexive
  }
end

theorem add_one: all m:Nat. m + 1 = suc(m)
proof
  arbitrary m:Nat;
  equations
    m + 1 = suc(m + 0)      by add_suc[m][0]
      ... = suc(m)          by rewrite goal with add_zero[m]; reflexive
end

theorem add_commute: all n:Nat. all m:Nat. n + m = m + n
proof
  induction Nat
  case 0 {
    arbitrary m : Nat;
    equations  0 + m = m       by apply + in goal; reflexive
                 ... = m + 0   by symmetric add_zero[m]
  }
  case suc(n') {
    arbitrary m : Nat;
    equations
      suc(n') + m = suc(n' + m)       by apply + in goal; reflexive
              ... = suc(m + n')       by rewrite goal with IH[m]; reflexive
              ... = m + suc(n')       by symmetric add_suc[m][n']
  }
end

theorem add_assoc: all m:Nat. all n:Nat, o:Nat.
  (m + n) + o = m + (n + o)
proof
  induction Nat
  case 0 {
    arbitrary n:Nat, o:Nat;
    have (0 + n) + o = 0 + (n + o) by apply + in goal; reflexive
  }
  case suc(m') {
    arbitrary n:Nat, o:Nat;
    equations
      (suc(m') + n) + o = suc((m' + n) + o) by apply + in goal; reflexive
                    ... = suc(m' + (n + o))
                                   by rewrite goal with IH[n,o]; reflexive
                    ... = suc(m') + (n + o) by apply + in goal; reflexive
  }
end

theorem left_cancel: all x:Nat. all y:Nat, z:Nat.
  if x + y = x + z then y = z
proof
  induction Nat
  case 0 {
    arbitrary y:Nat, z:Nat;
    suppose prem: 0 + y = 0 + z;
    equations   y = 0 + y      by apply + in goal; reflexive
              ... = 0 + z      by prem
              ... = z          by apply + in goal; reflexive
  }
  case suc(x') {
    arbitrary y:Nat, z:Nat;
    suppose prem: suc(x') + y = suc(x') + z;
    have p1: suc(x' +  y) = suc(x' + z) by
      transitive have suc(x' +  y) = suc(x') + y by apply + in goal; reflexive
      transitive prem apply + in goal; reflexive;
    have p2: x' + y = x' + z by injective suc; p1;
    have IHyz: if x' + y = x' + z then y = z by IH[y,z];
    using IHyz with p2
  }
end

function pred(Nat) -> Nat {
  pred(0) = 0;
  pred(suc(n)) = n;
}

theorem pred_one: pred(suc(0)) = 0
proof
  apply pred in goal; reflexive
end

function -(Nat,Nat) -> Nat {
  -(0, m) = 0;
  -(suc(n), m) = switch m {
                   case 0 { suc(n) }
                   case suc(m') { n - m' }
                 };
}

function sub_from(Nat,Nat) -> Nat {
  sub_from(0, m) = m;
  sub_from(suc(n), m) = sub_from(n, pred(m));
}

function diff(Nat,Nat) -> Nat {
  diff(0, m) = m;
  diff(suc(n'), m) = switch m {
                       case 0 { suc(n') }
                       case suc(m') { diff(n', m') }
                     };
}

theorem sub_one_one: 1 - 1 = 0
proof
  apply - in goal; reflexive
end

function ≤(Nat,Nat) -> bool {
  ≤(0, m) = true;
  ≤(suc(n'), m) =
    switch m {
      case 0 { false }
      case suc(m') { n' ≤ m' }
    };
}

define < : fn Nat,Nat -> bool = λ x, y { suc(x) ≤ y }
define > : fn Nat,Nat -> bool = λ x, y { y < x }
define ≥ : fn Nat,Nat -> bool = λ x, y { y ≤ x }

theorem less_equal_refl: all n:Nat. n ≤ n
proof
  induction Nat
  case 0 { have 0 ≤ 0 by apply ≤ in goal; . }
  case suc(n') { have suc(n') ≤ suc(n') by apply ≤ in goal; IH }
end

theorem less_equal_trans: all m:Nat. all n:Nat, o:Nat.
  if m ≤ n and n ≤ o then m ≤ o
proof
  induction Nat
  case 0 {
    arbitrary n:Nat, o:Nat;
    suppose _;
    have 0 ≤ o by apply ≤ in goal; .
  }
  case suc(m') {
    arbitrary n:Nat, o:Nat;
    assume Prem : suc(m') ≤ n and n ≤ o;
    have sm_n: suc(m') ≤ n by Prem;
    have n_o: n ≤ o by Prem;
    switch n {
      case 0 {
        have sm_z: suc(m') ≤ 0 by rewrite sm_n with EQ;
        have false by apply ≤ in sm_z
      }
      case suc(n') {
        have sm_sn: suc(m') ≤ suc(n') by rewrite sm_n with EQ;
        have m_n: m' ≤ n' by apply ≤ in sm_sn;
        have sn_o: suc(n') ≤ o by rewrite n_o with EQ;
        switch o {
          case 0 {
            have sn_z: suc(n') ≤ 0 by rewrite sn_o with EQ;
            have false by apply ≤ in sn_z
          }
          case suc(o') {
            have sn_so: suc(n') ≤ suc(o') by rewrite sn_o with EQ;
            have n_o: n' ≤ o' by apply ≤ in sn_so;
	    apply ≤ in goal; 
            have m' ≤ o' by using IH[n',o'] with m_n, n_o
          }
        }
      }
    }
  }
end