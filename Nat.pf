union Nat {
  zero
  suc(Nat)
}

function operator +(Nat,Nat) -> Nat {
  operator +(0, m) = m
  operator +(suc(n), m) = suc(n + m)
}

function operator *(Nat,Nat) -> Nat {
  operator *(0, m) = 0
  operator *(suc(n), m) = m + (n * m)
}

function max(Nat,Nat) -> Nat {
  max(zero, n) = n
  max(suc(m'), n) =
    switch n {
      case zero { suc(m') }
      case suc(n') { suc(max(m',n')) }
    }
}

theorem add_zero: all n:Nat.  n + 0 = n
proof
  enable operator +
  induction Nat
  case 0 {
    show 0 + 0 = 0   by .
  }
  case suc(n') assume IH {
    equations
      suc(n') + 0 = suc(n' + 0)  by .
              ... = suc(n')      by rewrite IH.
  }
end

theorem add_suc: all m:Nat. all n:Nat.  m + suc(n) = suc(m + n)
proof
  enable operator +
  induction Nat
  case 0 {
    arbitrary n : Nat
    show 0 + suc(n) = suc(0 + n)  by .
  }
  case suc(n') assume IH {
    arbitrary n : Nat
    equations
      suc(n') + suc(n) = suc(n' + suc(n))  by .
                   ... = suc(suc(n' + n))  by rewrite IH[n].
                   ... = suc(suc(n') + n)  by .
  }
end

theorem add_one: all m:Nat.  m + 1 = suc(m)
proof
  arbitrary m:Nat
  equations
    m + 1 = suc(m + 0)  by add_suc[m][0]
      ... = suc(m)      by rewrite add_zero[m].
end

theorem add_commute: all n:Nat. all m:Nat.  n + m = m + n
proof
  enable operator +
  induction Nat
  case 0 {
    arbitrary m : Nat
    equations  0 + m = m      by .
                 ... = m + 0  by symmetric add_zero[m]
  }
  case suc(n') assume IH {
    arbitrary m : Nat
    equations suc(n') + m = suc(n' + m)  by .
                      ... = suc(m + n')  by rewrite IH[m].
                      ... = m + suc(n')  by symmetric add_suc[m][n']
  }
end

theorem add_assoc: all m:Nat. all n:Nat, o:Nat.
  (m + n) + o = m + (n + o)
proof
  enable operator +
  induction Nat
  case 0 {
    arbitrary n:Nat, o:Nat
    have (0 + n) + o = 0 + (n + o)   by .
  }
  case suc(m') assume IH {
    arbitrary n:Nat, o:Nat
    equations
      (suc(m') + n) + o = suc((m' + n) + o)  by .
                    ... = suc(m' + (n + o))  by rewrite IH[n,o].
                    ... = suc(m') + (n + o)  by .
  }
end

theorem left_cancel: all x:Nat. all y:Nat, z:Nat.
  if x + y = x + z then y = z
proof
  enable operator +
  induction Nat
  case 0 {
    arbitrary y:Nat, z:Nat
    suppose prem: 0 + y = 0 + z
    equations   y = 0 + y      by .
              ... = 0 + z      by prem
              ... = z          by .
  }
  case suc(x') assume IH {
    arbitrary y:Nat, z:Nat
    assume prem: suc(x') + y = suc(x') + z
    show y = z  by apply IH[y,z] to
    show x' + y = x' + z
    injective suc
    show suc(x' + y) = suc(x' + z)  by prem
  }
end

function pred(Nat) -> Nat {
  pred(0) = 0
  pred(suc(n)) = n
}

theorem pred_one: pred(suc(0)) = 0
proof
  definition pred.
end

function operator -(Nat,Nat) -> Nat {
  operator -(0, m) = 0
  operator -(suc(n), m) =
    switch m {
      case 0 { suc(n) }
      case suc(m') { n - m' }
    }
}

function sub_from(Nat,Nat) -> Nat {
  sub_from(0, m) = m
  sub_from(suc(n), m) = sub_from(n, pred(m))
}

function diff(Nat,Nat) -> Nat {
  diff(0, m) = m
  diff(suc(n'), m) = switch m {
                       case 0 { suc(n') }
                       case suc(m') { diff(n', m') }
                     }
}

theorem sub_one_one: 1 - 1 = 0
proof
  definition operator -.
end

function operator ≤(Nat,Nat) -> bool {
  operator ≤(0, m) = true
  operator ≤(suc(n'), m) =
    switch m {
      case 0 { false }
      case suc(m') { n' ≤ m' }
    }
}

define operator < : fn Nat,Nat -> bool = λ x, y { suc(x) ≤ y }
define operator > : fn Nat,Nat -> bool = λ x, y { y < x }
define operator ≥ : fn Nat,Nat -> bool = λ x, y { y ≤ x }

theorem less_implies_less_equal:
  all x:Nat. all y:Nat.
  if x < y then x ≤ y
proof
  induction Nat
  case zero {
    arbitrary y:Nat
    assume zy: 0 < y
    definition operator ≤.
  }
  case suc(x') assume IH {
    arbitrary y:Nat
    assume sx_y: suc(x') < y
    have ssx_y: suc(suc(x')) ≤ y  by definition operator < in sx_y
    switch y {
      case zero assume yz {
        have false  by definition operator ≤ in (rewrite yz in ssx_y)
      }
      case suc(y') assume EQ : y = suc(y') {
        have ssx_sy: suc(suc(x')) ≤ suc(y')  by rewrite EQ in ssx_y
	enable {operator <, operator ≤}
        have x_y: x' < y'  by ssx_sy
        have x' ≤ y'  by apply IH[y'] to x_y
      }
    }
  }
end

theorem less_equal_refl: all n:Nat. n ≤ n
proof
  enable operator ≤
  induction Nat
  case 0 { have 0 ≤ 0  by . }
  case suc(n') assume IH { have suc(n') ≤ suc(n')  by IH }
end

theorem less_equal_antisymmetric:
  all x:Nat. all y:Nat. 
  if x ≤ y and y ≤ x
  then x = y
proof
  induction Nat
  case zero {
    arbitrary y:Nat
    suppose zy_yz: 0 ≤ y and y ≤ 0
    switch y {
      case zero { . }
      case suc(y') assume y_suc {
        have sy_z: suc(y') ≤ 0 by rewrite y_suc in zy_yz
        show false by definition operator ≤ in sy_z
      }
    }
  }
  case suc(x') assume IH {
    arbitrary y:Nat
    suppose sxy_ysx: suc(x') ≤ y and y ≤ suc(x')
    switch y {
      case zero assume y_z {
        have sx_z: suc(x') ≤ 0 by rewrite y_z in sxy_ysx
	show false by definition operator ≤ in sx_z
      }
      case suc(y') assume y_suc {
        enable operator ≤
        have x_le_y: x' ≤ y' by rewrite y_suc in sxy_ysx
	have y_le_x: y' ≤ x' by rewrite y_suc in sxy_ysx
        have x_y: x' = y' by (apply IH[y'] to x_le_y, y_le_x)
	show suc(x') = suc(y') by rewrite x_y.
      }
    }
  }
end

theorem less_equal_trans: all m:Nat. all n:Nat, o:Nat.
  if m ≤ n and n ≤ o then m ≤ o
proof
  enable operator ≤
  induction Nat
  case 0 {
    arbitrary n:Nat, o:Nat
    suppose _
    have 0 ≤ o  by .
  }
  case suc(m') assume IH {
    arbitrary n:Nat, o:Nat
    assume Prem: suc(m') ≤ n and n ≤ o
    have sm_n: suc(m') ≤ n  by Prem // bug
    have n_o: n ≤ o  by Prem
    switch n {
      case 0 assume nz {
        have sm_z: suc(m') ≤ 0  by rewrite nz in sm_n
        have false  by sm_z
      }
      case suc(n') assume ns {
        have sm_sn: suc(m') ≤ suc(n')  by rewrite ns in sm_n
        have m_n: m' ≤ n'  by sm_sn
        have sn_o: suc(n') ≤ o  by rewrite ns in n_o
        switch o {
          case 0 assume oz {
            have sn_z: suc(n') ≤ 0  by rewrite oz in sn_o
            show false  by sn_z
          }
          case suc(o') assume os {
            have sn_so: suc(n') ≤ suc(o')  by rewrite os in sn_o
            have n_o: n' ≤ o'  by sn_so
            definition operator ≤
            show m' ≤ o'  by apply IH[n',o'] to m_n, n_o
          }
        }
      }
    }
  }
end

theorem not_less_less_equal:
  all x: Nat. all y: Nat.
  if not (x < y) then y ≤ x
proof
  enable operator ≤
  induction Nat
  case zero {
    arbitrary y: Nat
    assume not_0_y: not (0 < y)
    switch y {
      case zero { . }
      case suc(y') assume ys {
        show false by apply (rewrite ys in not_0_y)
                      to (definition operator <.)
      }
    }
  }
  case suc(x') assume IH {
    arbitrary y: Nat
    assume not_sx_y: not (suc(x') < y)
    switch y {
      case zero { . }
      case suc(y') assume ys {
        have not_x_y: not (x' < y')
          by (assume x_y: x' < y'
            have sx_sy: suc(x') < suc(y')
              by definition operator < (definition operator < in x_y)
            have sx_y: suc(x') < y by (rewrite ys sx_sy)
            apply not_sx_y to sx_y)
        show y' ≤ x' by apply IH[y'] to not_x_y
      }
    }
  }
end

theorem less_irreflexive:  all x:Nat. not (x < x)
proof
  induction Nat
  case zero {
    assume z_l_z: 0 < 0
    show false by definition {operator <, operator ≤} in z_l_z
  }
  case suc(x') assume IH: not (x' < x') {
    assume sx_l_sx: suc(x') < suc(x')
    enable {operator <, operator ≤}
    have x_l_x: x' < x' by sx_l_sx
    show false by apply IH to x_l_x
  }
end

theorem less_not_greater_equal:
  all x:Nat. all y:Nat.
  if x < y then not (y ≤ x)
proof
  induction Nat
  case zero {
    arbitrary y : Nat
    assume z_l_y: 0 < y
    assume y_le_z: y ≤ 0
    switch y {
      case zero assume y_z: y = 0 {
        definition {operator <, operator ≤}
	in (rewrite y_z in z_l_y)
      }
      case suc(y') assume y_s: y = suc(y') {
        definition {operator ≤}
	in (rewrite y_s in y_le_z)
      }
    }
  }
  case suc(x') assume IH {
    arbitrary y : Nat
    assume sx_less_y
    assume y_le_sx
    switch y {
      case zero assume y_eq_zero {
        have false by (definition {operator <, operator ≤} in
                       (rewrite y_eq_zero in sx_less_y))
      }
      case suc(y') assume ys {
        have x_less_y: x' < y' by
           definition {operator <, operator ≤}
           definition {operator <, operator ≤} in (rewrite ys in sx_less_y)
	have y_le_x: y' ≤ x' by
	   definition {operator <, operator ≤}
	   in (rewrite ys in y_le_sx)
        have false by apply (apply IH[y'] to x_less_y) to y_le_x
      }
    }
  }
end

theorem less_not_equal:
  all x:Nat. all y:Nat.
  if x < y then not (x = y)
proof
  arbitrary x:Nat arbitrary y:Nat
  assume x_l_y: x < y
  assume x_y: x = y
  have y_l_y: y < y by rewrite x_y in x_l_y
  show false by apply less_irreflexive[y] to y_l_y
end

theorem less_implies_not_greater:
  all x:Nat. all y:Nat.
  if x < y then not (y < x)
proof
  induction Nat
  case zero {
    arbitrary y:Nat
    assume zero_less_y
    assume y_less_zero
    have false by (definition {operator <, operator ≤} in y_less_zero)
    }
  case suc(x') assume IH {
    arbitrary y:Nat
    assume sx_less_y
    assume y_less_sx
    switch y {
      case zero assume y_eq_zero {
        have false by (definition {operator <, operator ≤} in
                       (rewrite y_eq_zero in sx_less_y))
      }
      case suc(y') assume ys {
        have x_less_y: x' < y' by
           definition {operator <, operator ≤}
           definition {operator <, operator ≤} in (rewrite ys in sx_less_y)
        have y_less_x: y' < x' by
           definition {operator <, operator ≤}
           definition {operator <, operator ≤} in (rewrite ys in y_less_sx)
        have false by apply (apply IH[y'] to x_less_y) to y_less_x
      }
    }
  }
end

theorem max_suc: all x:Nat. max(suc(x), x) = suc(max(x,x))
proof
  induction Nat
  case zero {
    definition max.
  }
  case suc(x') assume IH {
    equations
    max(suc(suc(x')),suc(x')) = suc(max(suc(x'),x'))
                                         by definition max.
    ... = suc(suc(max(x',x')))           by rewrite IH.
    ... = suc(max(suc(x'),suc(x')))      by definition max.
  }
end

theorem trichotomy:
  all x:Nat. all y:Nat.
  x < y  or  x = y  or  y < x
proof
  induction Nat
  case zero {
    arbitrary y:Nat
    switch y {
      case zero { have 0 = 0 by reflexive }
      case suc(y') {
        have 0 < suc(y') by definition {operator <, operator ≤}.
      }
    }
  }
  case suc(x') assume IH {
    arbitrary y:Nat
    enable operator ≤
    switch y {
      case zero { have 0 < suc(x')  by definition operator <.}
      case suc(y') {
        enable operator <
        cases (have (x' < y' or x' = y' or y' < x') by IH[y'])
        case less { show suc(x') < suc(y')  by less }
        case equal { show suc(x') = suc(y')  by rewrite equal . }
        case greater { show suc(y') < suc(x')  by greater }
      }
    }
  }
end
  
theorem trichotomy2:
  all y:Nat, x:Nat.
  if not (x = y) and not (x < y)
  then y < x
proof
  arbitrary y:Nat, x:Nat
  assume prem: not (x = y) and not (x < y)
  cases trichotomy[x][y]
  case less: x < y {
    have not_less: not (x < y)  by prem
    have false  by apply not_less to less
  }
  case equal: x = y {
    have not_equal: not (x = y)  by prem
    have false  by apply not_equal to equal
  }
  case greater: y < x {
    show y <  x by greater
  }
end

theorem positive_1_and_2: 0 ≤ 1 and 0 ≤ 2
proof
  have one_pos: 0 ≤ 1 by definition operator ≤.
  have two_pos: 0 ≤ 2 by definition operator ≤.
  show 0 ≤ 1 and 0 ≤ 2 by one_pos, two_pos
end

theorem positive_2: 0 ≤ 2
proof
  show 0 ≤ 2 by positive_1_and_2
end

theorem less_implies_less_equal:
  all x:Nat. all y:Nat.
  if x < y  then  x ≤ y
proof
  enable {operator ≤, operator <}
  induction Nat
  case zero {
    arbitrary y:Nat
    suppose z_y: 0 < y
    show 0 ≤ y by .
  }
  case suc(x') assume IH {
    arbitrary y:Nat
    switch y {
      case zero {
        suppose sx_z: suc(x') < 0
	have false by sx_z
      }
      case suc(y') {
        suppose sx_sy: suc(x') < suc(y')
	have x_y: x' < y' by sx_sy
	have x_le_y: x' ≤ y' by (apply IH[y'] to x_y)
	show suc(x') ≤ suc(y') by x_le_y
      }
    }
  }
end

theorem dichotomy:  all x:Nat, y:Nat.  x ≤ y  or  y < x
proof
  arbitrary x:Nat, y:Nat
  have tri: x < y or x = y or y < x by trichotomy[x][y]
  cases tri
  case x_l_y: x < y {
    have x_le_y: x ≤ y by apply less_implies_less_equal[x][y] to x_l_y
    show x ≤ y or y < x by x_le_y
  }
  case x_eq_y: x = y {
    have x_le_y: x ≤ y by rewrite x_eq_y less_equal_refl[y]
    show x ≤ y or y < x by x_le_y
  }
  case y_l_x: y < x {
    show x ≤ y or y < x by y_l_x
  }
end

theorem zero_or_positive: all x:Nat. x = 0 or 0 < x
proof
  arbitrary x:Nat
  switch x {
    case zero {
      show true or 0 < 0 by .
    }
    case suc(x') {
      have z_l_sx: 0 < suc(x') by definition {operator <, operator ≤}.
      show suc(x') = 0 or 0 < suc(x') by z_l_sx
    }
  }
end

theorem dist_mult_add:
  all a:Nat. all x:Nat, y:Nat.
  a * (x + y) = a * x + a * y
proof
  induction Nat
  case zero {
    arbitrary x:Nat, y:Nat
    show 0 * (x + y) = 0 * x + 0 * y
    definition {operator *, operator +}.
  }
  case suc(a') assume IH {
    arbitrary x:Nat, y:Nat
    show suc(a') * (x + y) = suc(a') * x + suc(a') * y
    definition operator *
    show x + y + a' * (x + y) = (x + a' * x) + (y + a' * y)
    equations
    x + y + a' * (x + y) = x + y + (a' * x + a' * y) by rewrite IH[x,y].
    ... = ((x + y) + a' * x) + a' * y by symmetric add_assoc[x+y][a'*x,a'*y]
    ... = (x + (y + a' * x)) + a' * y by rewrite add_assoc[x][y,a'*x].
    ... = (x + (a' * x + y)) + a' * y by rewrite add_commute[a'*x][y].
    ... = ((x + a' * x) + y) + a' * y by rewrite symmetric add_assoc[x][a'*x,y].
    ... = (x + a' * x) + (y + a' * y) by add_assoc[x+a'*x][y,a'*y]
  }
end

function is_even(Nat) -> bool {
  is_even(0) = true
  is_even(suc(n)) = is_odd(n)
}

function is_odd(Nat) -> bool {
  is_odd(0) = false
  is_odd(suc(n)) = is_even(n)
}

define Even : fn Nat -> bool = λ n { some m:Nat. n = 2 * m }
define Odd : fn Nat -> bool = λ n { some m:Nat. n = suc (2 * m) }

theorem addition_of_evens:
  all x:Nat, y:Nat.
  if Even(x) and Even(y) then Even(x + y)
proof
  arbitrary x:Nat, y:Nat
  assume even_xy: Even(x) and Even(y)
  have even_x: some m:Nat. x = 2 * m by definition Even in even_xy
  have even_y: some m:Nat. y = 2 * m by definition Even in even_xy
  obtain a where x_2a: x = 2*a from even_x
  obtain b where y_2b: y = 2*b from even_y
  definition Even
  show some m:Nat. x + y = 2 * m
  choose a + b
  rewrite x_2a | y_2b
  show (2 * a) + (2 * b) = 2 * (a + b) by symmetric dist_mult_add[2][a,b]
end

theorem is_even_odd:
  all n:Nat.
  (if is_even(n) then Even(n))
  and (if is_odd(n) then Odd(n))
proof
  induction Nat
  case zero {
    have part1: if is_even(0) then Even(0)
      by assume _
         show Even(0)
         by definition Even
	    choose 0
	    definition {operator *, operator +}.
   have part2: if is_odd(0) then Odd(0)
     by assume zero_odd
        have false by definition is_odd in zero_odd
    part1, part2
  }
  case suc(n') assume IH {
    have part1: (if is_even(suc(n')) then Even(suc(n'))) by
      (assume suc_even: is_even(suc(n'))
       have odd_n: is_odd(n') by definition is_even in suc_even
       have Odd_n: Odd(n') by apply (conjunct 1 of IH) to odd_n
       obtain m where n_2m from definition Odd in Odd_n
       definition Even
       choose suc(m)
       rewrite n_2m
       definition {operator *, operator+}
       rewrite add_zero[m] | add_suc[m][m].)
    have part2: (if is_odd(suc(n')) then Odd(suc(n'))) by
      (assume suc_odd: is_odd(suc(n'))
       have even_n: is_even(n') by definition is_odd in suc_odd
       have Even_n: Even(n') by apply (conjunct 0 of IH) to even_n
       obtain m where n_2m from definition Even in Even_n
       definition Odd
       choose m
       rewrite n_2m.)
    part1, part2
  }
end

theorem zero_le_zero: all x:Nat. if x ≤ 0 then x = 0
proof
  induction Nat
  case zero {
    assume _
    .
  }
  case suc(x') {
    assume prem: suc(x') ≤ 0
    show false by definition operator ≤ in prem
  }
end