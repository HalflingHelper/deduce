import Nat

union List<T> {
  empty;
  node(T, List<T>);
}

function length<E>(List<E>) -> Nat {
  length(empty) = 0;
  length(node(n, next)) = 1 + length(next);
}

function append<E>(List<E>, List<E>) -> List<E> {
  append(empty, ys) = ys;
  append(node(n, xs), ys) = node(n, append(xs, ys));
}

function reverse<E>(List<E>) -> List<E> {
  reverse(empty) = empty;
  reverse(node(n, next)) = append(reverse(next), node(n, empty));
}

theorem length_zero: length(empty) = 0
proof
  reflexive
end

theorem length_one: all U :type, x:U. length(node(x, empty)) = 1
proof
  arbitrary U:type, x:U;
  reflexive
end

define L1 = node(1, node(2, empty))
define L2 = node(3, node(4, node(5, empty)))
define L3 = node(1, node(2, node(3, node(4, node(5, empty)))))

theorem length_L3: length(L3) = 5
proof
  reflexive
end

theorem append_test: append(L1, L2) = L3
proof
  reflexive
end

theorem reverse_test2: reverse(L1) = node(2, node(1, empty))
proof
  reflexive
end

theorem reverse_test3: reverse(L2) = node(5, node(4, node(3, empty)))
proof
  reflexive
end

theorem length_append_123: length(append(L1, L2)) = length(L1) + length(L2)
proof
  reflexive
end  

theorem length_append: all U :type. all xs :List<U>. all ys :List<U>.
  length(append(xs, ys)) = length(xs) + length(ys)
proof
  arbitrary U :type;
  induction List<U>
  case empty {
    arbitrary ys:List<U>;
    have length(append(empty,ys)) = length(empty) + length(ys) by reflexive
  }
  case node(n, xs') {
    arbitrary ys :List<U>;
    equations
      length(append(node(n,xs'),ys))
          = length(node(n, append(xs', ys)))    by reflexive
      ... = 1 + length(append(xs', ys))         by reflexive
      ... = 1 + (length(xs') + length(ys))
                              by rewrite goal with IH[ys] then reflexive
      ... = length(node(n,xs')) + length(ys)    by reflexive
  }
end

theorem append_assoc1:
  append(append(node(1, empty), node(2, empty)), node(3, empty))
  = append(node(1, empty), append(node(2, empty), node(3, empty)))
proof
  reflexive
end  

theorem append_assoc: all U :type. all xs :List<U>. all ys :List<U>, zs:List<U>.
  append(append(xs, ys), zs) = append(xs, append(ys, zs))
proof
  arbitrary U :type;
  induction List<U>
  case empty {
    arbitrary ys :List<U>, zs :List<U>;
    reflexive
  }
  case node(n, xs') {
    arbitrary ys :List<U>, zs :List<U>;
    equations
      append(append(node(n,xs'),ys),zs)
          = node(n,append(append(xs',ys),zs))         by reflexive
      ... = append(node(n,xs'),append(ys,zs))
                                  by rewrite goal with IH[ys,zs] then reflexive
  }
end

theorem append_empty: all U :type. all xs :List<U>.
  append(xs, empty) = xs
proof
  arbitrary U :type;
  induction List<U>
  case empty {
    have append(empty, empty) = empty by reflexive
  }
  case node(n, xs') {
    equations
      append(node(n,xs'),empty)
          = node(n,append(xs',empty))     by reflexive
      ... = node(n,xs')                   by rewrite goal with IH then reflexive
  }
end

theorem length_reverse: all U :type. all xs :List<U>.
  length(reverse(xs)) = length(xs)
proof
  arbitrary U : type;
  induction List<U>
  case empty {
    have length(reverse(empty)) = length(empty) by reflexive
  }
  case node(n, xs') {
    equations
      length(reverse(node(n,xs')))
          = length(append(reverse(xs'), node(n,empty))) by reflexive
      ... = length(reverse(xs')) + length(node(n,empty))
                    by rewrite goal with
                      length_append[U][reverse(xs')][node(n,empty)] then reflexive
      ... = length(xs') + 1           by rewrite goal with IH then reflexive
      ... = length(node(n,xs'))
                       by rewrite goal with add_one[length(xs')] then reflexive
  }
end

theorem reverse_append_123:
  reverse(append(L1, L2)) = append(reverse(L2), reverse(L1))
proof
  reflexive
end  

theorem reverse_append: all U :type. all xs :List<U>. all ys :List<U>.
  reverse(append(xs, ys)) = append(reverse(ys), reverse(xs))
proof
  arbitrary U :type;
  induction List<U>
  case empty {
    arbitrary ys :List<U>;
    equations
    reverse(append(empty,ys))
        = reverse(ys)                          by reflexive
    ... = append(reverse(ys),empty)
                by rewrite goal with append_empty[U][reverse(ys)] then reflexive
    ... = append(reverse(ys),reverse(empty))   by reflexive
  }
  case node(n, xs') {
    arbitrary ys :List<U>;
    equations
    reverse(append(node(n,xs'),ys))
        = reverse(node(n,append(xs',ys))) by reflexive
    ... = append(reverse(append(xs',ys)), node(n, empty)) by reflexive
    ... = append(append(reverse(ys), reverse(xs')), node(n, empty))
          by rewrite goal with IH[ys] then reflexive
    ... = append(reverse(ys), append(reverse(xs'), node(n, empty)))
          by append_assoc[U][reverse(ys)][reverse(xs'), node(n, empty)]
    ... = append(reverse(ys), reverse(node(n,xs'))) by reflexive
  }
end

theorem reverse_reverse: all U :type. all ls :List<U>.
  reverse(reverse(ls)) = ls
proof
  arbitrary U :type;
  induction List<U>
  case empty {
    have reverse(reverse(empty)) = empty by reflexive
  }
  case node(n, ls') {
    equations
      reverse(reverse(node(n,ls')))
          = reverse(append(reverse(ls'), node(n,empty))) by reflexive
      ... = append(reverse(node(n,empty)), reverse(reverse(ls')))
                  by reverse_append[U][reverse(ls')][node(n,empty)]
      ... = append(reverse(node(n,empty)), ls')
                  by rewrite goal with IH then reflexive
      ... = append(node(n,empty), ls') by reflexive
      ... = node(n,ls') by reflexive
  }
end

function map<T>(List<T>, (T)->T) -> List<T> {
  map(empty, f) = empty;
  map(node(x, ls), f) = node(f(x), map(ls, f));
}

theorem map_suc: map(L1, λx{ suc(x) } : (Nat)->Nat) = node(2, node(3, empty))
proof
  reflexive
end

theorem length_map: all T:type, f:(T)->T. all xs:List<T>.
  length(map(xs, f)) = length(xs)
proof
  arbitrary T:type, f:(T)->T;
  induction List<T>
  case empty {
    reflexive
  }
  case node(x, ls') {
    equations
      length(map(node(x,ls'),f))
          = suc(length(map(ls',f)))   by reflexive
      ... = suc(length(ls'))          by rewrite goal with IH then reflexive
      ... = length(node(x,ls'))       by reflexive
  }
end

theorem map_id: all T:type, f:(T)->T. if (all x:T. f(x) = x) then
   all xs:List<T>. map(xs, f) = xs
proof
  arbitrary T:type, f:(T)->T;
  assume fxx: (all x:T. f(x) = x);
  induction List<T>
  case empty {
    have map(empty,f) = empty by reflexive
  }
  case node(x, ls) {
    equations
      map(node(x,ls),f)
          = node(f(x), map(ls, f)) by reflexive
      ... = node(x, map(ls, f)) by rewrite goal with fxx[x] then reflexive
      ... = node(x,ls) by rewrite goal with IH then reflexive
  }
end

/*
TODO: add support for ∀ and Λ
define ∘ : ∀ T:type. ((T)->T, (T)->T) -> ((T)->T)
         = ΛT. λ g,f { λ x { g(f(x)) } }
*/

theorem map_append: all T:type, f:(T)->T, ys:List<T>. all xs:List<T>.
  map(append(xs,ys), f) = append(map(xs,f), map(ys, f))
proof
  arbitrary T:type, f:(T)->T, ys:List<T>;
  induction List<T>
  case empty {
    reflexive
  }
  case node(x, xs') {
    equations
      map(append(node(x,xs'),ys),f)
          = map(node(x, append(xs',ys)), f)     by reflexive
      ... = node(f(x), map(append(xs',ys), f))  by reflexive
      ... = node(f(x), append(map(xs',f), map(ys,f)))
                                        by (rewrite goal with IH then reflexive)
      ... = append(map(node(x,xs'),f),map(ys,f)) by reflexive
  }
end

theorem map_compose: all U:type, f:(U)->U, g:(U)->U. all ls :List<U>.
  map(map(ls, f), g) = map(ls, λx{ g(f(x)) })
proof
  arbitrary U:type, f:(U)->U, g:(U)->U;
  induction List<U>
  case empty { reflexive }
  case node(x, ls) {
    equations
    map(map(node(x,ls),f),g)
	= node(g(f(x)), map(map(ls, f), g))     by reflexive
    ... = node(g(f(x)), map(ls, λy{g(f(y))}))
   	                                 by rewrite goal with IH then reflexive
    ... = map(node(x,ls),λy{g(f(y))})    by reflexive
  }
end

function foldr<T,U>(List<T>, U, (T,U)->U) -> U {
  foldr(empty, u, c) = u;
  foldr(node(t, ls), u, c) = c(t, foldr(ls, u, c));
}

theorem foldr_add12: foldr(L1, 0, λa,b{ a + b }) = 3
proof
  reflexive
end

theorem foldr_id: foldr(L1, empty, λx,ls{ node(x,ls) }) = L1
proof
  reflexive
end

function foldl<T,U>(List<T>, U, (U,T)->U) -> U {
  foldl(empty, u, c) = u;
  foldl(node(t, ls), u, c) = foldl(ls, c(u, t), c);
}

theorem foldl_add12: foldl(L1, 0, λa,b{ a + b }) = 3
proof
  reflexive
end  

theorem foldl_rev12:
  foldl(L1, empty, λls,x{ node(x,ls) }) = node(2,node(1,empty))
proof
  reflexive
end  


function down_from(Nat) -> List<Nat> {
  down_from(zero) = empty;
  down_from(suc(n)) = node(n, down_from(n));
}

theorem down_from2: down_from(2) = node(1, node(0, empty))
proof
  reflexive
end

define up_to : (Nat) -> List<Nat> = λ n { reverse(down_from(n)) }

theorem up_to2: up_to(2) = node(0, node(1, empty))
proof
  reflexive
end

theorem up_to3: up_to(3) = node(0, node(1, node(2, empty)))
proof
  reflexive
end

function range_aux(Nat, Nat, Nat) -> List<Nat> {
  range_aux(0, end, k) = map(up_to(end), (λ x { x + k }) : (Nat) -> Nat);
  range_aux(suc(begin'), end, k) =
    switch end {
      case zero { empty } /* shouldn't happen */
      case suc(end') { range_aux(begin', end', suc(k)) }
    };
}

define range : (Nat,Nat) -> List<Nat> = λ b, e { range_aux(b, e, 0) }

theorem range_empty: range(0, 0) = empty
proof
  reflexive
end  

theorem range1: range(0, 1) = node(0, empty)
proof
  reflexive
end  

theorem range2: range(0, 2) = node(0, node(1, empty))
proof
  reflexive
end  

theorem range13: range(1, 3) = node(1, node(2, empty))
proof
  reflexive
end  

theorem range25: range(2, 5) = node(2, node(3, node(4, empty)))
proof
  reflexive
end  


/* TODO zip */