import Nat
import List

union Option<K> {
  none;
  just(K);
}

union Tree<K> {
  tempty;
  tnode(K, Nat, Tree<K>, Tree<K>);
}

function compute_height<T>(Tree<T>) -> Nat {
  compute_height(tempty) = 0;
  compute_height(tnode(n,h,L,R)) = 1 + max(compute_height(L), compute_height(R));
}

function height<T>(Tree<T>) -> Nat {
  height(tempty) = 0;
  height(tnode(n,h,L,R)) = h;
}

function less_tree(Tree<Nat>, Nat) -> bool {
  less_tree(tempty, n) = true;
  less_tree(tnode(x, h, left, right), n) =
    x ≤ n and less_tree(left, n) and less_tree(right, n);
}

function is_AVL<T>(Tree<T>) -> bool {
  is_AVL(tempty) = true;
  is_AVL(tnode(n, h, L, R)) = diff(compute_height(L), compute_height(R)) ≤ 1
                             and is_AVL(L) and is_AVL(R);
}

define make_tnode : (Nat, Tree<Nat>, Tree<Nat>) -> Tree<Nat>
  = λ x, A, B { tnode(x, 1 + max(height(A), height(B)), A, B) }

define balance : (Tree<Nat>) -> Tree<Nat>
  = λ A {
  switch A {
    case tempty { tempty }
    case tnode(x, xh, L, R) {
      if height(L) + 1 < height(R) then
        switch R {
	  case tempty { tempty }
	  case tnode(y, yh, RL, RR) {
	    if height(RL) ≤ height(RR) then
	      make_tnode(y, make_tnode(x, L, RL), RR)
	    else (
	      switch RL {
	        case tempty { tempty } // can't happen
	        case tnode(z, zh, RLL, RLR) {
	          make_tnode(z, make_tnode(x, L, RLL), make_tnode(y, RLR, RR))
	        }
	      }
	    ) 
	  }
	}
      else if height(R) + 1 < height(L) then (
        switch L {
	  case tempty { tempty }
	  case tnode(y, yh, LL, LR) {
	    if height(LR) ≤ height(LL) then
	      make_tnode(y, LL, make_tnode(x, LR, R))
	    else (
	      switch LR {
	        case tempty { tempty }
		case tnode(z, zh, LRL, LRR) {
		  make_tnode(z, make_tnode(y, LL, LRL), make_tnode(x, LRR, R))
		}
              }
	    )
	  }
        }
      ) else
        A
    }
  }
}

function insert(Tree<Nat>, Nat) -> Tree<Nat> {
  insert(tempty, x) = tnode(x, 0, tempty, tempty);
  insert(tnode(y, h, left, right), x) =
    if x ≤ y then
      balance(make_tnode(y, insert(left, x), right))
    else
      balance(make_tnode(y, left, insert(right, x)));
}
