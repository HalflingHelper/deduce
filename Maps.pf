
import Sets
import Option

define update : < T, U > fn (fn (T) -> U), T, U -> (fn (T) -> U)
              = λf,x,v{ λy{ if y = x then v else f(y) } }

theorem update_eq :
  all T:type, U:type, f: fn (T) -> U, x:T, v:U.
  update(f, x, v)(x) = v
proof
  arbitrary T:type, U:type, f: fn (T) -> U, x:T, v:U;
  apply update in goal;
  .
end

theorem update_not_eq :
  all T:type, U:type, f: fn (T) -> U, x:T, v:U, y:T.
  if not (x = y)
  then update(f, x, v)(y) = f(y)
proof
  arbitrary T:type, U:type, f: fn (T) -> U, x:T, v:U, y:T;
  assume not_eq;
  apply update in goal;
  switch y = x {
    case true {
      have yx: y = x by (rewrite goal with EQ; .);
      have xy: x = y by symmetric yx;
      have false by using not_eq with xy
    }
    case false {
      .
    }
  }
end

theorem update_shadow :
  all T:type, U:type, f:fn(T)->U, x:T, v:U, w:U.
  update(update(f, x, v), x, w) = update(f, x, w)
proof
  arbitrary T:type, U:type, f:fn(T)->U, x:T, v:U, w:U;
  apply update in goal;
  extensionality;
  arbitrary y:T;
  switch y = x {
    case true { . }
    case false { . }
  }
end

theorem update_permute :
  all T:type, U:type, f:fn(T)->U, x:T, v:U, w:U, y:T.
  if not (x = y)
  then update(update(f, x, v), y, w) = update(update(f, y, w), x, v)
proof
  arbitrary T:type, U:type, f:fn(T)->U, x:T, v:U, w:U, y:T;
  assume x_neq_y;
  apply update in goal;
  extensionality;
  arbitrary z:T;
  switch z = y {
    case true {
      have zy: z = y by (rewrite goal with EQ; .);
      switch z = x {
        case true {
	  have zx: z = x by (rewrite goal with EQ; .);
	  have xy: x = y by transitive (symmetric zx) zy;
	  have false by using x_neq_y with xy
	}
	case false {
	  .
	}
      }
    }
    case false {
      .
    }
  }
end

/* Partial Maps */

define domain : < T,U > fn (fn(T)->Option<U>) -> fn(T)->bool
              = λf{λx{ switch f(x) {
	                 case none { false }
			 case just(y) { true }
		  }}}

define restrict : < T,U > fn (fn(T)->Option<U>), (fn(T)->bool) -> (fn(T)->Option<U>)
                = λf,P{λx{ if P(x) then f(x) else none }}
		
theorem restrict_domain:
  all T:type, U:type, f:fn(T)->Option<U>, P:fn(T)->bool.
  domain(restrict(f, P)) ⊆ P
proof
  arbitrary T:type, U:type, f:fn(T)->Option<U>, P:fn(T)->bool;
  apply restrict, domain, ⊆ in goal;
  arbitrary x:T;
  assume prem;
  switch P(x) {
    case true { . }
    case false { have false by rewrite prem with EQ }
  }
end
