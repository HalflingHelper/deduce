
import Set
import Option

define operator ∘ : fn<T,U,V>  (fn U->V), (fn T->U) -> (fn T->V)
                  = generic T,U,V { λ g,f { λ x { g(f(x)) } } }

define update : fn<T, U> (fn (T) -> U), T, U -> (fn (T) -> U)
              = generic T, U { λf,x,v{ λy{ if y = x then v else f(y) } } }

theorem update_eq :
  < T, U > all f: fn (T) -> U, x:T, v:U.
  update(f, x, v)(x) = v
proof
  arbitrary T:type, U:type
  arbitrary f: fn (T) -> U, x:T, v:U
  definition update
end

theorem update_not_eq :
  < T, U > all f: fn (T) -> U, x:T, v:U, y:T.
  if not (x = y)
  then update(f, x, v)(y) = f(y)
proof
  arbitrary T:type, U:type
  arbitrary f: fn (T) -> U, x:T, v:U, y:T
  suppose not_eq
  _definition update
  switch y = x {
    case true suppose yx_true {
      have yx: y = x by (_rewrite yx_true.)
      have xy: x = y by symmetric yx
      conclude false by apply not_eq to xy
    }
    case false {
      .
    }
  }
end

theorem update_shadow : all T:type, U:type. all f:fn(T)->U, x:T, v:U, w:U.
  update(update(f, x, v), x, w) = update(f, x, w)
proof
  arbitrary T:type, U:type
  arbitrary f:fn(T)->U, x:T, v:U, w:U
  _definition update
  extensionality
  arbitrary y:T
  switch y = x {
    case true { . }
    case false { . }
  }
end

theorem update_permute :
  < T, U > all f:fn(T)->U, x:T, v:U, w:U, y:T.
  if not (x = y)
  then update(update(f, x, v), y, w) = update(update(f, y, w), x, v)
proof
  arbitrary T:type, U:type
  arbitrary f:fn(T)->U, x:T, v:U, w:U, y:T
  suppose x_neq_y
  _definition update
  extensionality
  arbitrary z:T
  switch z = y {
    case true suppose zy_true {
      have zy: z = y by (_rewrite zy_true.)
      switch z = x {
        case true suppose zx_true {
	  have zx: z = x by (_rewrite zx_true.)
	  have xy: x = y by transitive (symmetric zx) zy
	  conclude false by apply x_neq_y to xy
	}
	case false {
	  .
	}
      }
    }
    case false {
      .
    }
  }
end

/* Partial Maps */

define empty_map : fn<T, U>  T -> Option<U>
       = generic T, U { λk { @none<U> } }

define domain : fn<T,U>  (fn(T)->Option<U>) -> Set<T>
              = generic T, U { λf{char_fun(λx{
                  switch f(x) {
	            case none { false }
		    case just(y) { true }
		}})}}

define restrict : fn<T,U> (fn(T)->Option<U>), (Set<T>) -> (fn(T)->Option<U>)
                = generic T, U { λf,P { λx { if x ∈ P then f(x) else none }}}
		
theorem restrict_domain:
  < T, U > all f:fn(T)->Option<U>, P:Set<T>.
  domain(restrict(f, P)) ⊆ P
proof
  arbitrary T:type, U:type
  arbitrary f:fn(T)->Option<U>, P:Set<T>
  _definition {restrict, domain, operator ⊆}
  arbitrary x:T
  suppose prem
  switch x ∈ P {
    case true { . }
    case false suppose Px_false {
      conclude false by
        rewrite (definition operator∈ in Px_false) in
        definition {operator∈, rep} in prem
    }
  }
end
