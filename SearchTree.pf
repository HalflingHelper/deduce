/*

  Binary Search Tree
  (not balanced)

*/

import Base
import Nat
import Pair
import Option
import Maps

union Tree {
  empty_tree
  tree_node(Tree, Nat, Nat, Tree)
}

function insert(Tree, Nat, Nat) -> Tree {
  insert(empty_tree, x, v) = tree_node(empty_tree, x, v, empty_tree)
  insert(tree_node(L, y, v2, R), x, v) =
    if x = y then
      tree_node(L, y, v, R)
    else if x < y then
      tree_node(insert(L, x, v), y, v2, R)
    else
      tree_node(L, y, v2, insert(R, x, v))
}

function keys(Tree) -> fn(Nat)->bool {
  containsKey(empty_tree) = λx{false}
  containsKey(tree_node(L, y, v, R)) = λx{x = y} ∪ keys(L) ∪ keys(R)
}

function lookup(Tree) -> fn (Nat) -> Option<Nat> {
  lookup(empty_tree) = λx{none}
  lookup(tree_node(L, y, v, R)) =
    λx{if x = y then
         just(v)
       else if x < y then
         lookup(L)(x)
       else
         lookup(R)(x)}
}

function all_keys(Tree, fn (Nat) -> bool) -> bool {
  all_keys(empty_tree, P) = true
  all_keys(tree_node(L, x, v, R), P) =
    all_keys(L, P) and P(x) and all_keys(R, P)
}

function is_BST(Tree) -> bool {
  is_BST(empty_tree) = true
  is_BST(tree_node(L, x, v, R)) =
    all_keys(L, λk{k < x}) and all_keys(R, λk{x < k}) and
    is_BST(L) and is_BST(R)
}

theorem insert_all:
  all T:Tree. all x:Nat, v:Nat, P: fn(Nat) -> bool.
  if all_keys(T, P) and P(x)
  then all_keys(insert(T, x, v), P)
proof
  stop ?
  induction Tree
  case empty_tree {
    arbitrary x:Nat,v:Nat, P: fn(Nat) -> bool
    suppose prem: all_keys(empty_tree,P) and P(x)
    suffices all_keys(insert(empty_tree, x, v), P)
    _definition {all_keys, all_keys, insert}
    conclude P(x)  by prem
  }
  case tree_node(L, z, v2, R) suppose IHL, IHR {
    arbitrary x:Nat,v:Nat,P: fn(Nat) -> bool
    suppose prem: all_keys(tree_node(L,z,v2,R),P) and P(x)
    enable {all_keys, insert}
    have PL: all_keys(L, P)  by prem
    have Pz: P(z)  by prem
    have PR: all_keys(R, P)  by prem
    suffices all_keys(insert(tree_node(L, z, v2, R), x, v), P)
    cases ex_mid[x = z]
    case xz: x = z {
      _rewrite xz
      conclude all_keys(L,P) and P(z) and all_keys(R,P)  by (PL, Pz, PR)
    }
    case not_xz: not (x = z) {
      cases ex_mid[x < z]
      case xlz: x < z {
        have LxP: all_keys(insert(L,x,v),P)  by apply IHL[x,v,P] to PL, prem
        _rewrite not_xz | xlz
        conclude all_keys(insert(L,x,v),P) and P(z) and all_keys(R,P)  by LxP,Pz,PR
      }
      case not_xlz: not (x < z) {
        have RxP: all_keys(insert(R,x,v),P)  by apply IHR[x,v,P] to PR, prem
        _rewrite not_xz | not_xlz
        conclude all_keys(L,P) and P(z) and all_keys(insert(R,x,v),P) by PL,Pz,RxP
      }
    }
  }
end

theorem insert_BST:
  all T:Tree. all x:Nat, v:Nat.
  if is_BST(T) then is_BST(insert(T, x, v))
proof
  induction Tree
  case empty_tree {
    arbitrary x:Nat,v:Nat
    suppose prem
    conclude is_BST(insert(empty_tree,x,v))
      by _definition {is_BST,is_BST,insert,all_keys}.
  }
  case tree_node(L, y, v2, R) suppose IHL, IHR {
    arbitrary x:Nat, v:Nat
    suppose prem: is_BST(tree_node(L,y,v2,R))
    enable is_BST
    have BST_L: is_BST(L)  by prem
    have BST_R: is_BST(R)  by prem
    have L_less_y: all_keys(L, λk{k < y})  by prem
    have y_less_R: all_keys(R, λk{y < k})  by prem
    suffices is_BST(insert(tree_node(L, y, v2, R), x, v))
    _definition insert
    switch x = y {
      case true {
        conclude is_BST(tree_node(L,y,v,R))  by L_less_y, y_less_R, BST_L, BST_R
      }
      case false suppose xy_false {
        have not_xey: not (x = y) by (suppose xy _rewrite xy_false in xy)
        switch x < y {
          case true suppose xy_true {
            have xy: x < y  by (_rewrite xy_true.)
            have Lx_less_y: all_keys(insert(L,x,v), λk{k < y})
              by apply insert_all[L][x,v,(λk{k < y}):fn(Nat)->bool]
                 to L_less_y, xy
            have BST_Lx: is_BST(insert(L,x,v))   by apply IHL[x,v] to BST_L
            conclude is_BST(tree_node(insert(L,x,v),y,v2,R))
                by Lx_less_y, y_less_R, BST_R, BST_Lx
          }
          case false suppose xy_false {
            have BST_Rx: is_BST(insert(R,x,v))  by apply IHR[x,v] to BST_R
            have not_xly: not (x < y)
               by (suppose prem _rewrite xy_false in prem)
            have yx: y < x  by apply trichotomy2[y,x] to not_xey, not_xly
            have y_less_Rx: all_keys(insert(R,x,v), λk{y < k})
              by apply insert_all[R][x,v,(λk{y < k}):fn(Nat)->bool]
                 to y_less_R, yx
            conclude is_BST(tree_node(L,y,v2,insert(R,x,v)))
                by L_less_y, BST_Rx, y_less_Rx, BST_L
          }
        }
      }
    }
  }
end

theorem lookup_empty:
  all k:Nat.
  lookup(empty_tree)(k) = none
proof
  arbitrary k:Nat
  _definition lookup.
end


theorem true_is_true: all x:bool. if x then x = true
proof
  arbitrary x:bool
  suppose x_true
  switch x {
    case true { . }
    case false suppose x_false {
      have false  by _rewrite x_false in x_true
    }
  }
end

theorem false_is_false: all x:bool. if not x then x = false
proof
  arbitrary x:bool
  suppose not_x
  switch x {
    case true suppose x_true {
      have x_is_true: x  by (_rewrite x_true.)
      conclude false  by apply not_x to x_is_true
    }
    case false { . }
  }
end

theorem lookup_insert_update_empty:
  all k:Nat, v:Nat.
  lookup(insert(empty_tree, k, v)) = update(lookup(empty_tree), k, just(v))
proof
  arbitrary k:Nat, v:Nat
  extensionality arbitrary x:Nat
  switch x = k {
    case true suppose xk_true {
      enable {insert, lookup, update}
      equations
	lookup(insert(empty_tree,k,v))(x)
	    = just(v)                            by (_rewrite xk_true.)
	... = update(lookup(empty_tree),k,just(v))(x)
		by (_rewrite xk_true.)
    }
    case false suppose xk_false {
      switch x < k {
	case true suppose x_less_k_true {
	  enable {insert, lookup, update}
	  equations
	    lookup(insert(empty_tree,k,v))(x)
		= none          by (_rewrite x_less_k_true | xk_false.)
	    ... = update(lookup(empty_tree),k,just(v))(x)
				by (_rewrite xk_false.)
	}
	case false suppose x_less_k_false {
	  enable {insert, lookup, update}
	  equations
	    lookup(insert(empty_tree,k,v))(x)
		= none          by (_rewrite xk_false | x_less_k_false.)
	    ... = update(lookup(empty_tree),k,just(v))(x)
				by (_rewrite xk_false.)
	}
      }
    }
  }
end

theorem lookup_insert_update_empty_short:
  all k:Nat, v:Nat.
  lookup(insert(empty_tree, k, v)) = update(lookup(empty_tree), k, just(v))
proof
  arbitrary k:Nat, v:Nat
  extensionality arbitrary x:Nat
  enable {insert, lookup, update}
  switch x = k {
    case true suppose xk_true { . }
    case false suppose xk_false {
      switch x < k {
	case true { . }
	case false { . }
      }
    }
  }
end

theorem lookup_insert_update:
  all T:Tree. all k:Nat, v:Nat.
  if is_BST(T)
  then lookup(insert(T, k, v)) = update(lookup(T), k, just(v))
proof
  induction Tree
  case empty_tree {
    arbitrary k:Nat, v:Nat
    suppose prem
    suffices lookup(insert(empty_tree,k,v)) = update(lookup(empty_tree),k,just(v))
    lookup_insert_update_empty[k,v]
  }
  case tree_node(L, j, w, R) suppose IHL, IHR {
    arbitrary k:Nat, v:Nat
    suppose prem
    extensionality arbitrary x:Nat
    cases trichotomy[x][j]
    case x_less_j {
      have not_xj: not (x = j)  by apply less_not_equal[x][j] to x_less_j
      switch k < j {
        case true suppose k_less_j_true {
          have k_less_j: k < j by (_rewrite k_less_j_true.)
          have not_kj: not (k = j)
              by apply less_not_equal[k][j] to k_less_j
          have BST_L: is_BST(L)  by _definition is_BST in prem
          enable {lookup, insert, update}
          equations
            lookup(insert(tree_node(L,j,w,R),k,v))(x)
                = lookup(insert(L,k,v))(x)
                      by (_rewrite k_less_j_true|not_kj|not_xj|x_less_j.)
            ... = update(lookup(L),k,just(v))(x)
                      by (_rewrite (apply IHL[k,v] to BST_L).)
            ... = update(lookup(tree_node(L,j,w,R)), k, just(v))(x)
                      by (_rewrite not_xj | x_less_j.)
        }
        case false suppose k_less_j_false {
          have not_k_less_j: not (k < j)
             by (suppose kj have false by _rewrite k_less_j_false in kj)
          have x_neq_k: not (x = k)
            by (suppose x_eq_k apply (_rewrite x_eq_k in not_k_less_j)
                              to (_rewrite x_eq_k in x_less_j))
          enable {insert, lookup, update}			
          equations
            lookup(insert(tree_node(L,j,w,R),k,v))(x)
	        = lookup(L)(x)
                   by (switch k = j {
		      case true { _rewrite not_xj | x_less_j. }
		      case false {_rewrite k_less_j_false|not_xj|x_less_j.}
		      })
	    ... = update(lookup(tree_node(L,j,w,R)),k,just(v))(x)
                    by (_rewrite not_k_less_j|x_neq_k|x_less_j|not_xj.)
        }
      }
    }
    case x_eq_j {
      switch k = j {
        case true suppose kj {
          have jk: j = k by symmetric (_rewrite kj.)
	  enable {insert, lookup, update}
	  equations
	    lookup(insert(tree_node(L,j,w,R),k,v))(x)
	        = just(v)    	              by (_rewrite kj|x_eq_j.)
            ... = update(lookup(tree_node(L,j,w,R)),k,just(v))(x)
 	                                      by (_rewrite x_eq_j|jk.)
	}
	case false suppose kj_false {
          have jk_false: (j = k) = false
              by (apply false_is_false[j = k]
	          to (suppose jk have false by _rewrite jk in kj_false))
	  suffices lookup(insert(tree_node(L,j,w,R),k,v))(x)
	       = update(lookup(tree_node(L,j,w,R)),k,just(v))(x)
          switch k < j {
	    case true suppose klj: (k < j) = true {
	      enable {insert, lookup, update}
	      equations
	        lookup(insert(tree_node(L,j,w,R),k,v))(x)
	           = just(w)           by (_rewrite kj_false|klj|x_eq_j.)
	        ... = update(lookup(tree_node(L,j,w,R)),k,just(v))(x)
	                               by (_rewrite x_eq_j|jk_false.)
	    }
	    case false suppose not_klj: (k < j) = false {
	      enable {insert, lookup, update}
              equations
	        lookup(insert(tree_node(L,j,w,R),k,v))(x)
                    = just(w)         by _rewrite kj_false|not_klj|x_eq_j.
                ... = update(lookup(tree_node(L,j,w,R)),k,just(v))(x)
                                      by _rewrite x_eq_j|jk_false.
	    }
	  }
	}
      }
    }
    case j_less_x {
      have not_x_less_j: not (x < j)
        by apply less_implies_not_greater[j][x] to j_less_x
      have not_jx: not (j = x)
        by apply less_not_equal[j][x] to j_less_x
      have not_xj: not (x = j)
        by (suppose xj apply not_jx to symmetric xj)
      switch j < k {
        case true suppose j_less_k_true {
          have j_less_k: j < k by (_rewrite j_less_k_true.)
          have not_jk: not (j = k)
            by apply less_not_equal[j][k] to j_less_k
          _definition insert
          _rewrite apply false_is_false[k = j]
                  to (suppose kj apply not_jk to symmetric kj)
          have not_k_less_j: not (k < j)
               by apply less_implies_not_greater[j][k] to j_less_k
          _rewrite apply false_is_false[k < j] to not_k_less_j
          _definition {lookup, update}
          _rewrite apply false_is_false[x = j]
                  to (suppose xj apply not_jx to symmetric xj)
          have not_xj: not (x < j)
            by apply less_implies_not_greater[j][x] to j_less_x
          _rewrite apply false_is_false[x < j] to not_xj
          have BST_R: is_BST(R) by _definition is_BST in prem
          have IHR2: lookup(insert(R,k,v)) = update(lookup(R),k,just(v))
            by apply IHR[k,v] to BST_R
          _rewrite IHR2 _definition update
          .
        }
        case false suppose j_less_k_false {
          have not_jk: not (j < k)
            by (suppose jk have false by _rewrite j_less_k_false in jk)
          _definition {lookup, update}
          have lookupR: lookup(insert(tree_node(L,j,w,R),k,v))(x) = lookup(R)(x)
            by (_definition {insert, lookup}
                switch k = j {
                  case true {
                    _definition lookup
                    _rewrite apply false_is_false[x = j] to not_xj
                    _rewrite apply false_is_false[x < j] to not_x_less_j.
                  }
                  case false suppose kj_false {
                    have not_j_eq_k: not (j = k)
                       by (suppose jk _rewrite kj_false in symmetric jk)
                    have k_less_j: k < j
                       by apply trichotomy2[k, j] to (not_j_eq_k, not_jk)
                    _rewrite apply true_is_true[k < j] to k_less_j
                    _definition lookup
                    _rewrite (apply false_is_false[x = j]
                             to suppose xj apply not_jx to symmetric xj)
                    _rewrite (apply false_is_false[x < j] to not_x_less_j).
                  }
                })
          _rewrite lookupR
          have x_neq_k: not (x = k)
            by (suppose xk apply (_rewrite (symmetric xk) in not_jk)
                          to j_less_x)
          _rewrite x_neq_k
          _rewrite (apply false_is_false[x = j] 
                   to suppose xj (apply not_jx to symmetric xj))
          _rewrite not_x_less_j.
        }
      }
    }
  }
end

